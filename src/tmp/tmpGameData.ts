export const tmpGameData = {
  entityTypeVariables: {
    host: {
      default: 'nohost',
      dataType: 'string',
      streamMode: 1
    }
  },
  shops: {
    mainShop: {
      unitTypes: {},
      itemTypes: {
        KXSjsHU2aQ: {
          replaceItemInTargetSlot: false,
          hideIfRequirementNotMet: false,
          hideIfUnaffordable: false,
          isPurchasable: true,
          quantity: '',
          requirement: {
            requiredItemTypes: [],
            playerAttributes: {}
          },
          price: {
            coins: 0,
            requiredItemTypes: [],
            playerAttributes: {
              wood: 20
            }
          }
        },
        mG6ZvXHNNX: {
          replaceItemInTargetSlot: false,
          hideIfRequirementNotMet: false,
          hideIfUnaffordable: false,
          isPurchasable: true,
          quantity: '',
          requirement: {
            requiredItemTypes: [],
            playerAttributes: {}
          },
          price: {
            coins: 0,
            requiredItemTypes: [],
            playerAttributes: {
              stone: 20
            }
          }
        },
        wkuPHP94bA: {
          price: {
            playerAttributes: {},
            requiredItemTypes: {
              HBlfzHEdHP: 5
            },
            coins: 0
          },
          requirement: {
            playerAttributes: {},
            requiredItemTypes: []
          },
          quantity: '',
          isPurchasable: true,
          hideIfUnaffordable: false,
          hideIfRequirementNotMet: false,
          replaceItemInTargetSlot: false
        }
      },
      dismissible: true,
      name: 'Store'
    }
  },
  animationTypes: {
    dropped: {
      loopCount: 0,
      framesPerSecond: 0,
      frames: [
        1
      ],
      name: 'dropped'
    },
    default: {
      name: 'default',
      frames: [
        2,
        3,
        4,
        3
      ],
      loopCount: null,
      framesPerSecond: 8
    },
    TpsmgGVfi5: {
      framesPerSecond: 0,
      loopCount: 0,
      frames: [
        1
      ],
      name: 'default'
    },
    Xa8AwWbA0V: {
      name: 'use',
      frames: [
        2,
        3,
        4,
        1
      ],
      framesPerSecond: 10,
      loopCount: 1
    }
  },
  states: {
    unselected: {
      sound: {},
      particles: {},
      body: 'selected',
      animation: 'none',
      name: 'unselected'
    },
    default: {
      body: 'default',
      animation: 'default',
      particles: {},
      sound: {},
      name: 'default'
    },
    selected: {
      sound: {},
      particles: {},
      body: 'selected',
      animation: 'default',
      name: 'selected'
    },
    dropped: {
      sound: {},
      particles: {},
      body: 'dropped',
      animation: 'default',
      name: 'dropped'
    }
  },
  map: {
    originalTileHeight: 64,
    originalTileWidth: 64,
    width: 20,
    version: 1,
    type: 'map',
    tilewidth: 64,
    tilesets: [
      {
        tilewidth: 64,
        tileheight: 64,
        tilecount: 540,
        spacing: 0,
        name: 'tilesheet_complete',
        margin: 0,
        imagewidth: 1728,
        imageheight: 1280,
        image: 'https://cache.modd.io/asset/spriteImage/1524311504249_tilesheet.png',
        firstgid: 1,
        columns: 27,
        isMaped: true
      }
    ],
    tileheight: 64,
    tiledversion: '1.1.5',
    renderorder: 'right-down',
    orientation: 'orthogonal',
    nextobjectid: 167,
    layers: [
      {
        y: 0,
        x: 0,
        width: 20,
        visible: true,
        type: 'tilelayer',
        opacity: 1,
        name: 'floor',
        height: 20,
        data: [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        y: 0,
        x: 0,
        width: 20,
        visible: true,
        type: 'tilelayer',
        opacity: 1,
        name: 'floor2',
        height: 20,
        data: [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        width: 20,
        height: 20,
        y: 0,
        x: 0,
        visible: true,
        type: 'objectgroup',
        opacity: 1,
        objects: [],
        name: 'debris',
        draworder: 'topdown'
      },
      {
        y: 0,
        x: 0,
        width: 20,
        visible: true,
        type: 'tilelayer',
        opacity: 1,
        name: 'walls',
        height: 20,
        data: [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        y: 0,
        x: 0,
        width: 20,
        visible: true,
        type: 'tilelayer',
        opacity: 1,
        name: 'trees',
        height: 20,
        data: [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      }
    ],
    infinite: false,
    height: 20
  },
  buffTypes: {
    canPenetrate: {
      unit: 'boolean',
      chance: 0.05
    },
    canPushDebris: {
      unit: 'boolean',
      chance: 0.05
    },
    height: {
      unit: 'percentage',
      chance: 0.2,
      maxBonus: 0.3,
      minBonus: 0.05
    },
    maxStamina: {
      unit: 'integer',
      chance: 0.1,
      maxBonus: 120,
      minBonus: 20
    },
    movementSpeed: {
      unit: 'integer',
      chance: 0.02,
      maxBonus: 5,
      minBonus: 1
    },
    immunity: {
      unit: 'percentage',
      chance: 0.1,
      maxBonus: 0.2,
      minBonus: 0.05
    },
    slowChance: {
      unit: 'percentage',
      chance: 0.05,
      maxBonus: 0.1,
      minBonus: 0.02
    },
    stunChance: {
      unit: 'percentage',
      chance: 0.05,
      maxBonus: 0.1,
      minBonus: 0.02
    },
    recoilForce: {
      unit: 'integer',
      chance: 0.04,
      maxBonus: 8,
      minBonus: 0
    },
    bulletForce: {
      unit: 'percentage',
      chance: 0.07,
      maxBonus: 1,
      minBonus: 0.1
    },
    ammoTotal: {
      unit: 'percentage',
      chance: 0.2,
      maxBonus: 0.3,
      minBonus: 0
    },
    ammoSize: {
      unit: 'percentage',
      chance: 0.1,
      maxBonus: 0.3,
      minBonus: 0
    },
    distanceEnd: {
      unit: 'percentage',
      chance: 0.3,
      maxBonus: 500,
      minBonus: 100
    },
    fireRate: {
      unit: 'percentage',
      chance: 0.15,
      maxBonus: -0.3,
      minBonus: 0
    },
    reloadRate: {
      unit: 'percentage',
      chance: 0.1,
      maxBonus: -0.3,
      minBonus: 0
    }
  },
  projectileTypes: {
    blood: {
      destroyOnContactWith: {
        debris: false,
        walls: false,
        projectiles: false,
        items: false,
        units: false
      },
      name: 'Blood',
      attributes: {},
      variables: {},
      states: {
        default: {
          name: 'default',
          sound: {},
          particles: {},
          animation: 'default',
          body: 'default'
        }
      },
      animations: {
        default: {
          name: 'default',
          frames: [
            1
          ],
          loopCount: 0,
          framesPerSecond: 0
        }
      },
      bodies: {
        default: {
          name: 'default',
          type: 'dynamic',
          width: 48,
          height: 48,
          'z-index': {
            layer: 1,
            depth: 1
          },
          fixedRotation: true,
          'destroyedOnCollisionWithWall/unit': true,
          allowSleep: true,
          collidesWith: {
            units: false,
            items: false,
            projectiles: false,
            walls: false,
            debris: false
          },
          angularDamping: 1,
          linearDamping: 1,
          rotationSpeed: 3,
          spriteScale: 1,
          fixtures: [
            {
              density: 1,
              friction: 0.01,
              restitution: 0.01,
              shape: {
                type: 'rectangle'
              },
              isSensor: true
            }
          ],
          jointType: 'weldJoint',
          unitAnchor: {
            x: 0,
            y: 33,
            rotation: 0
          },
          itemAnchor: {
            x: 0,
            y: 0,
            lowerAngle: 0,
            upperAngle: 0
          },
          bullet: true
        }
      },
      explosiveTimer: 1500,
      cellSheet: {
        columnCount: 1,
        rowCount: 1,
        url: 'https://cache.modd.io/asset/spriteImage/1589508229977_Blood_Red_Puddle.png'
      },
      lifeSpan: 5500,
      effects: {
        create: {
          projectileType: '',
          sound: {},
          animation: ''
        },
        destroy: {
          projectileType: '',
          sound: {},
          animation: ''
        }
      },
      inventoryImage: ''
    }
  },
  itemTypes: {
    meleeAttack: {
      carriedBy: [],
      buffTypes: [],
      cost: {
        quantity: 0
      },
      bonus: {
        passive: {
          unitAttribute: {},
          playerAttribute: {}
        },
        consume: {
          unitAttribute: {},
          playerAttribute: {}
        }
      },
      removeWhenEmpty: false,
      isUsedOnPickup: false,
      canBeUsedBy: [],
      sound: {},
      damage: {
        unitAttributes: {
          health: 10
        }
      },
      particles: {},
      destroyTimer: 30000,
      penetration: false,
      'bulletDestroyedOnCollisionWithWall/unitDistance': 1300,
      'bulletDestroyedOnCollisionWithWall/unitStartPosition': {
        rotation: 0,
        y: 0,
        x: 0
      },
      effects: {
        use: {
          projectileType: '',
          sound: {},
          animation: 'Xa8AwWbA0V',
          tween: 'none'
        },
        create: {
          projectileType: '',
          sound: {},
          animation: ''
        },
        destroy: {
          projectileType: '',
          sound: {},
          animation: ''
        },
        empty: {
          sound: {},
          animation: ''
        },
        reload: {
          sound: {},
          animation: ''
        }
      },
      knockbackForce: 0,
      'bulletDestroyedOnCollisionWithWall/unitForce': 14,
      fireRate: 500,
      recoilForce: 0,
      reloadRate: 2800,
      description: null,
      maxQuantity: null,
      quantity: null,
      projectileType: '',
      hideIfUnaffordable: false,
      bodies: {
        dropped: {
          bullet: false,
          itemAnchor: {
            y: 0,
            x: 0
          },
          unitAnchor: {
            x: 0,
            y: 50
          },
          jointType: 'weldJoint',
          fixtures: [
            {
              isSensor: true,
              shape: {
                type: 'rectangle'
              },
              restitution: 0.01,
              friction: 0.01,
              density: 1
            }
          ],
          spriteScale: 1,
          rotationSpeed: 1,
          linearDamping: 1,
          angularDamping: 1,
          collidesWith: {
            debris: false,
            walls: false,
            projectiles: false,
            items: false,
            units: false
          },
          allowSleep: true,
          'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
          fixedRotation: false,
          'z-index': {
            depth: 2,
            layer: 1
          },
          height: 32,
          width: 64,
          type: 'static',
          name: 'dropped'
        },
        selected: {
          itemAnchor: {
            y: 0,
            x: 0
          },
          unitAnchor: {
            x: 0,
            y: 50,
            rotation: 0
          },
          jointType: 'weldJoint',
          fixtures: [
            {
              isSensor: false,
              shape: {
                type: 'rectangle'
              },
              restitution: 0.01,
              friction: 0.01,
              density: 1
            }
          ],
          spriteScale: 1,
          rotationSpeed: 3,
          linearDamping: 5,
          angularDamping: 1,
          collidesWith: {
            debris: false,
            walls: true,
            projectiles: true,
            items: true,
            units: true
          },
          allowSleep: true,
          'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
          fixedRotation: false,
          'z-index': {
            depth: 4,
            layer: 3
          },
          height: 32,
          width: 64,
          type: 'spriteOnly',
          name: 'selected'
        }
      },
      animations: {
        default: {
          name: 'default',
          frames: [
            1
          ],
          loopCount: null,
          framesPerSecond: null
        },
        Xa8AwWbA0V: {
          name: 'use',
          frames: [
            2,
            3,
            4,
            1
          ],
          framesPerSecond: 10,
          loopCount: 1
        }
      },
      states: {
        dropped: {
          sound: {},
          particles: {},
          body: 'dropped',
          animation: 'default',
          name: 'dropped'
        },
        unselected: {
          sound: {},
          particles: {},
          body: 'none',
          animation: 'none',
          name: 'unselected'
        },
        selected: {
          sound: {},
          particles: {},
          body: 'selected',
          animation: 'none',
          name: 'selected'
        }
      },
      hits: [],
      type: 'weapon',
      'bulletDestroyedOnCollisionWithWall/unitType': 'raycast',
      isGun: false,
      canBePurchasedBy: [],
      isPurchasable: true,
      isStackable: false,
      inventoryImage: 'https://cache.modd.io/asset/spriteImage/1589566967650_attack.png',
      cellSheet: {
        url: 'https://cache.modd.io/asset/spriteImage/1589566908122_attack.png',
        rowCount: 1,
        columnCount: 4
      },
      variables: {},
      attributes: {},
      handle: '',
      name: 'Melee Attack',
      frames: {},
      bulletStartPosition: {
        x: 0,
        y: 0,
        rotation: 0
      },
      damageHitBox: {
        width: 28,
        height: 30,
        offsetX: 0,
        offsetY: 35
      },
      damageDelay: 0,
      controls: {
        undroppable: false,
        designatedInventorySlot: 1,
        mouseBehaviour: {
          rotateToFaceMouseCursor: true,
          flipSpriteHorizontallyWRTMouse: false
        },
        permittedInventorySlots: []
      },
      lifeSpan: 60000,
      confinedWithinMapBoundaries: true,
      delayBeforeUse: 0
    },
    axe: {
      carriedBy: [],
      buffTypes: [],
      cost: {
        quantity: 0
      },
      bonus: {
        passive: {
          unitAttribute: {},
          playerAttribute: {},
          isDisabledInBackpack: false
        },
        consume: {
          unitAttribute: {},
          playerAttribute: {}
        }
      },
      removeWhenEmpty: false,
      isUsedOnPickup: false,
      canBeUsedBy: [],
      sound: {},
      damage: {
        unitAttributes: {
          health: 499
        }
      },
      particles: {},
      destroyTimer: 30000,
      penetration: false,
      'bulletDestroyedOnCollisionWithWall/unitDistance': 1300,
      'bulletDestroyedOnCollisionWithWall/unitStartPosition': {
        rotation: 0,
        y: 0,
        x: 0
      },
      effects: {
        empty: {
          sound: {},
          animation: ''
        },
        reload: {
          sound: {},
          animation: ''
        },
        destroy: {
          animation: '',
          sound: {},
          projectileType: ''
        },
        create: {
          animation: '',
          sound: {},
          projectileType: ''
        },
        use: {
          tween: 'swingCCW',
          animation: 'use',
          sound: {},
          projectileType: ''
        }
      },
      knockbackForce: 0,
      'bulletDestroyedOnCollisionWithWall/unitForce': 14,
      fireRate: 500,
      recoilForce: 0,
      reloadRate: 2800,
      description: null,
      maxQuantity: null,
      quantity: null,
      projectileType: '',
      hideIfUnaffordable: false,
      bodies: {
        dropped: {
          bullet: false,
          itemAnchor: {
            y: 0,
            x: 0
          },
          unitAnchor: {
            rotation: 90,
            x: 0,
            y: 52
          },
          jointType: 'weldJoint',
          fixtures: [
            {
              isSensor: true,
              shape: {
                type: 'rectangle'
              },
              restitution: 0.01,
              friction: 0.01,
              density: 1
            }
          ],
          spriteScale: 1,
          rotationSpeed: 1,
          linearDamping: 1,
          angularDamping: 1,
          collidesWith: {
            debris: false,
            walls: false,
            projectiles: false,
            items: false,
            units: false
          },
          allowSleep: true,
          'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
          fixedRotation: false,
          'z-index': {
            depth: 2,
            layer: 1
          },
          height: 53,
          width: 26,
          type: 'dynamic',
          name: 'dropped'
        },
        selected: {
          itemAnchor: {
            x: 0,
            y: 52
          },
          unitAnchor: {
            x: 0,
            y: 0,
            rotation: 90
          },
          jointType: 'weldJoint',
          fixtures: [
            {
              isSensor: false,
              shape: {
                type: 'rectangle'
              },
              restitution: 0.01,
              friction: 0.01,
              density: 1
            }
          ],
          spriteScale: 1,
          rotationSpeed: 3,
          linearDamping: 5,
          angularDamping: 1,
          collidesWith: {
            debris: false,
            walls: true,
            projectiles: true,
            items: true,
            units: true
          },
          allowSleep: true,
          'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
          fixedRotation: false,
          'z-index': {
            depth: 4,
            layer: 3
          },
          height: 53,
          width: 26,
          type: 'spriteOnly',
          name: 'selected'
        }
      },
      animations: {
        default: {
          name: 'default',
          frames: [
            1
          ],
          loopCount: null,
          framesPerSecond: null
        }
      },
      states: {
        dropped: {
          sound: {},
          particles: {},
          body: 'dropped',
          animation: 'default',
          name: 'dropped'
        },
        unselected: {
          sound: {},
          particles: {},
          body: 'none',
          animation: 'none',
          name: 'unselected'
        },
        selected: {
          sound: {},
          particles: {},
          body: 'selected',
          animation: 'default',
          name: 'selected'
        }
      },
      hits: [],
      type: 'weapon',
      'bulletDestroyedOnCollisionWithWall/unitType': 'raycast',
      isGun: false,
      canBePurchasedBy: [],
      isPurchasable: true,
      isStackable: false,
      inventoryImage: 'https://cache.modd.io/asset/spriteImage/1588116120030_axe.png',
      cellSheet: {
        columnCount: 1,
        rowCount: 1,
        url: 'https://cache.modd.io/asset/spriteImage/1588116115083_axe.png'
      },
      variables: {},
      attributes: {},
      handle: '',
      name: 'Axe',
      frames: {},
      bulletStartPosition: {
        x: 0,
        y: 0,
        rotation: 0
      },
      damageHitBox: {
        width: 38,
        height: 30,
        offsetX: 0,
        offsetY: 50
      },
      damageDelay: 0,
      controls: {
        undroppable: true,
        designatedInventorySlot: 1,
        mouseBehaviour: {
          rotateToFaceMouseCursor: true,
          flipSpriteHorizontallyWRTMouse: false
        },
        permittedInventorySlots: [],
        canMerge: true,
        backpackAllowed: true
      },
      lifeSpan: 60000,
      confinedWithinMapBoundaries: true,
      delayBeforeUse: 0,
      streamMode: 1
    },
    KXSjsHU2aQ: {
      damageHitBox: {
        offsetY: 50,
        offsetX: 0,
        width: 60
      },
      delayBeforeUse: 0,
      controls: {
        undroppable: false,
        permittedInventorySlots: [],
        mouseBehaviour: {
          flipSpriteHorizontallyWRTMouse: false,
          rotateToFaceMouseCursor: true
        }
      },
      frames: {},
      bulletStartPosition: {
        rotation: 0,
        y: 0,
        x: 0
      },
      name: 'Wooden Wall',
      handle: '',
      attributes: {},
      variables: {},
      price: {
        playerAttributes: {},
        requiredItemTypes: {}
      },
      cellSheet: {
        url: 'https://cache.modd.io/asset/spriteImage/1589815468723_1588262615812_Tree_Trunk_Log_Wood_Circle.png',
        rowCount: 1,
        columnCount: 1
      },
      inventoryImage: null,
      isStackable: false,
      isPurchasable: false,
      canBePurchasedBy: [],
      isGun: false,
      'bulletDestroyedOnCollisionWithWall/unitType': 'raycast',
      type: 'consumable',
      hits: [],
      states: {
        selected: {
          name: 'selected',
          animation: 'default',
          body: 'selected',
          particles: {},
          sound: {}
        },
        unselected: {
          name: 'unselected',
          animation: 'none',
          body: 'none',
          particles: {},
          sound: {}
        },
        dropped: {
          name: 'dropped',
          animation: 'default',
          body: 'dropped',
          particles: {},
          sound: {}
        }
      },
      animations: {
        dropped: {
          name: 'dropped',
          frames: [
            1
          ],
          framesPerSecond: 0,
          loopCount: 0
        },
        default: {
          name: 'default',
          frames: [
            1
          ],
          loopCount: 0,
          framesPerSecond: 0
        }
      },
      bodies: {
        selected: {
          name: 'selected',
          type: 'spriteOnly',
          width: 64,
          height: 64,
          'z-index': {
            layer: 3,
            depth: 4
          },
          fixedRotation: false,
          'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
          allowSleep: true,
          collidesWith: {
            units: true,
            items: true,
            projectiles: true,
            walls: true,
            debris: false
          },
          angularDamping: 1,
          linearDamping: 5,
          rotationSpeed: 3,
          spriteScale: 1,
          fixtures: [
            {
              density: 1,
              friction: 0.01,
              restitution: 0.01,
              shape: {
                type: 'rectangle'
              },
              isSensor: false
            }
          ],
          jointType: 'weldJoint',
          unitAnchor: {
            y: 68,
            x: 0
          },
          itemAnchor: {
            y: 0,
            x: 0
          }
        },
        dropped: {
          bullet: false,
          name: 'dropped',
          type: 'dynamic',
          width: 64,
          height: 64,
          'z-index': {
            layer: 2,
            depth: 2
          },
          fixedRotation: false,
          'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
          allowSleep: true,
          collidesWith: {
            units: false,
            items: false,
            projectiles: false,
            walls: false,
            debris: false
          },
          angularDamping: 1,
          linearDamping: 1,
          rotationSpeed: 1,
          spriteScale: 1,
          fixtures: [
            {
              density: 1,
              friction: 0,
              restitution: 0,
              shape: {
                type: 'rectangle'
              },
              isSensor: true
            }
          ],
          jointType: 'weldJoint',
          unitAnchor: {
            y: 68,
            x: 0
          },
          itemAnchor: {
            y: 0,
            x: 0
          }
        }
      },
      hideIfUnaffordable: true,
      projectileType: '',
      quantity: 1,
      maxQuantity: 64,
      description: null,
      reloadRate: 2800,
      recoilForce: 0,
      fireRate: 1000,
      'bulletDestroyedOnCollisionWithWall/unitForce': 14,
      knockbackForce: 0,
      effects: {
        reload: {
          animation: '',
          sound: {}
        },
        empty: {
          animation: '',
          sound: {}
        },
        destroy: {
          animation: '',
          sound: {},
          projectileType: ''
        },
        create: {
          animation: '',
          sound: {},
          projectileType: ''
        },
        use: {
          tween: '',
          animation: '',
          sound: {},
          projectileType: ''
        }
      },
      'bulletDestroyedOnCollisionWithWall/unitStartPosition': {
        x: 0,
        y: 0,
        rotation: 0
      },
      'bulletDestroyedOnCollisionWithWall/unitDistance': 1300,
      penetration: false,
      destroyTimer: 100000,
      particles: {},
      damage: {},
      sound: {},
      canBeUsedBy: [],
      isUsedOnPickup: false,
      removeWhenEmpty: true,
      bonus: {
        consume: {
          coin: 0,
          playerAttribute: {},
          unitAttribute: {}
        },
        passive: {
          playerAttribute: {},
          unitAttribute: {}
        },
        isConsumedImmediately: false
      },
      cost: {},
      buffTypes: [],
      carriedBy: []
    },
    mG6ZvXHNNX: {
      carriedBy: [],
      buffTypes: [],
      cost: {},
      bonus: {
        isConsumedImmediately: false,
        passive: {
          unitAttribute: {},
          playerAttribute: {}
        },
        consume: {
          unitAttribute: {},
          playerAttribute: {}
        }
      },
      removeWhenEmpty: true,
      isUsedOnPickup: false,
      canBeUsedBy: [],
      sound: {},
      damage: {},
      particles: {},
      destroyTimer: 100000,
      penetration: false,
      'bulletDestroyedOnCollisionWithWall/unitDistance': 1300,
      'bulletDestroyedOnCollisionWithWall/unitStartPosition': {
        rotation: 0,
        y: 0,
        x: 0
      },
      effects: {
        use: {
          projectileType: '',
          sound: {},
          animation: '',
          tween: ''
        },
        create: {
          projectileType: '',
          sound: {},
          animation: ''
        },
        destroy: {
          projectileType: '',
          sound: {},
          animation: ''
        },
        empty: {
          sound: {},
          animation: ''
        },
        reload: {
          sound: {},
          animation: ''
        }
      },
      knockbackForce: 0,
      'bulletDestroyedOnCollisionWithWall/unitForce': 14,
      fireRate: 1000,
      recoilForce: 0,
      reloadRate: 2800,
      description: null,
      maxQuantity: 64,
      quantity: 1,
      projectileType: '',
      hideIfUnaffordable: true,
      bodies: {
        dropped: {
          itemAnchor: {
            y: 0,
            x: 0
          },
          unitAnchor: {
            x: 0,
            y: 68
          },
          jointType: 'weldJoint',
          fixtures: [
            {
              isSensor: true,
              shape: {
                type: 'rectangle'
              },
              restitution: 0,
              friction: 0,
              density: 1
            }
          ],
          spriteScale: 1,
          rotationSpeed: 1,
          linearDamping: 1,
          angularDamping: 1,
          collidesWith: {
            debris: false,
            walls: false,
            projectiles: false,
            items: false,
            units: false
          },
          allowSleep: true,
          'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
          fixedRotation: false,
          'z-index': {
            depth: 2,
            layer: 2
          },
          height: 64,
          width: 64,
          type: 'dynamic',
          name: 'dropped',
          bullet: false
        },
        selected: {
          itemAnchor: {
            y: 0,
            x: 0
          },
          unitAnchor: {
            x: 0,
            y: 68
          },
          jointType: 'weldJoint',
          fixtures: [
            {
              isSensor: false,
              shape: {
                type: 'rectangle'
              },
              restitution: 0.01,
              friction: 0.01,
              density: 1
            }
          ],
          spriteScale: 1,
          rotationSpeed: 3,
          linearDamping: 5,
          angularDamping: 1,
          collidesWith: {
            debris: false,
            walls: true,
            projectiles: true,
            items: true,
            units: true
          },
          allowSleep: true,
          'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
          fixedRotation: false,
          'z-index': {
            depth: 4,
            layer: 3
          },
          height: 64,
          width: 64,
          type: 'spriteOnly',
          name: 'selected'
        }
      },
      animations: {
        default: {
          framesPerSecond: 0,
          loopCount: 0,
          frames: [
            1
          ],
          name: 'default'
        },
        dropped: {
          loopCount: 0,
          framesPerSecond: 0,
          frames: [
            1
          ],
          name: 'dropped'
        }
      },
      states: {
        dropped: {
          sound: {},
          particles: {},
          body: 'dropped',
          animation: 'default',
          name: 'dropped'
        },
        unselected: {
          sound: {},
          particles: {},
          body: 'none',
          animation: 'none',
          name: 'unselected'
        },
        selected: {
          sound: {},
          particles: {},
          body: 'selected',
          animation: 'default',
          name: 'selected'
        }
      },
      hits: [],
      type: 'consumable',
      'bulletDestroyedOnCollisionWithWall/unitType': 'raycast',
      isGun: false,
      canBePurchasedBy: [],
      isPurchasable: false,
      isStackable: false,
      inventoryImage: null,
      cellSheet: {
        columnCount: 1,
        rowCount: 1,
        url: 'https://cache.modd.io/asset/spriteImage/1589816769337_1588262552245_Stone_Rock_Circle_Wall.png'
      },
      price: {
        requiredItemTypes: {},
        playerAttributes: {}
      },
      variables: {},
      attributes: {},
      handle: '',
      name: 'Stone Wall',
      bulletStartPosition: {
        x: 0,
        y: 0,
        rotation: 0
      },
      frames: {},
      controls: {
        mouseBehaviour: {
          rotateToFaceMouseCursor: true,
          flipSpriteHorizontallyWRTMouse: false
        },
        permittedInventorySlots: [],
        undroppable: false
      },
      delayBeforeUse: 0,
      damageHitBox: {
        width: 60,
        offsetX: 0,
        offsetY: 50
      }
    },
    s2vnp9Ph2d: {
      confinedWithinMapBoundaries: true,
      lifeSpan: 60000,
      damageHitBox: {
        offsetY: 50,
        offsetX: 0,
        width: 60
      },
      delayBeforeUse: 0,
      controls: {
        undroppable: false,
        permittedInventorySlots: [],
        mouseBehaviour: {
          flipSpriteHorizontallyWRTMouse: false,
          rotateToFaceMouseCursor: true
        }
      },
      frames: {},
      bulletStartPosition: {
        rotation: 0,
        y: 0,
        x: 0
      },
      name: 'Meat',
      handle: '',
      attributes: {},
      variables: {},
      price: {
        playerAttributes: {},
        requiredItemTypes: {}
      },
      cellSheet: {
        url: 'https://cache.modd.io/asset/spriteImage/1589817480532_meat.png',
        rowCount: 1,
        columnCount: 1
      },
      inventoryImage: null,
      isStackable: false,
      isPurchasable: false,
      canBePurchasedBy: [],
      isGun: false,
      'bulletDestroyedOnCollisionWithWall/unitType': 'raycast',
      type: 'consumable',
      hits: [],
      states: {
        selected: {
          name: 'selected',
          animation: 'default',
          body: 'selected',
          particles: {},
          sound: {}
        },
        unselected: {
          name: 'unselected',
          animation: 'none',
          body: 'none',
          particles: {},
          sound: {}
        },
        dropped: {
          name: 'dropped',
          animation: 'default',
          body: 'dropped',
          particles: {},
          sound: {}
        }
      },
      animations: {
        dropped: {
          name: 'dropped',
          frames: [
            1
          ],
          framesPerSecond: 0,
          loopCount: 0
        },
        default: {
          name: 'default',
          frames: [
            1
          ],
          loopCount: 0,
          framesPerSecond: 0
        }
      },
      bodies: {
        selected: {
          name: 'selected',
          type: 'spriteOnly',
          width: 34,
          height: 34,
          'z-index': {
            layer: 3,
            depth: 4
          },
          fixedRotation: false,
          'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
          allowSleep: true,
          collidesWith: {
            units: true,
            items: true,
            projectiles: true,
            walls: true,
            debris: false
          },
          angularDamping: 1,
          linearDamping: 5,
          rotationSpeed: 3,
          spriteScale: 1,
          fixtures: [
            {
              density: 1,
              friction: 0.01,
              restitution: 0.01,
              shape: {
                type: 'rectangle'
              },
              isSensor: false
            }
          ],
          jointType: 'weldJoint',
          unitAnchor: {
            y: 53,
            x: 0
          },
          itemAnchor: {
            y: 0,
            x: 0
          }
        },
        dropped: {
          bullet: false,
          name: 'dropped',
          type: 'dynamic',
          width: 34,
          height: 34,
          'z-index': {
            layer: 2,
            depth: 2
          },
          fixedRotation: false,
          'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
          allowSleep: true,
          collidesWith: {
            units: false,
            items: false,
            projectiles: false,
            walls: false,
            debris: false
          },
          angularDamping: 1,
          linearDamping: 1,
          rotationSpeed: 1,
          spriteScale: 1,
          fixtures: [
            {
              density: 1,
              friction: 0,
              restitution: 0,
              shape: {
                type: 'rectangle'
              },
              isSensor: true
            }
          ],
          jointType: 'weldJoint',
          unitAnchor: {
            y: 53,
            x: 0
          },
          itemAnchor: {
            y: null,
            x: 0
          }
        }
      },
      hideIfUnaffordable: true,
      projectileType: '',
      quantity: 1,
      maxQuantity: 64,
      description: null,
      reloadRate: 2800,
      recoilForce: 0,
      fireRate: 1000,
      'bulletDestroyedOnCollisionWithWall/unitForce': 14,
      knockbackForce: 0,
      effects: {
        reload: {
          animation: '',
          sound: {}
        },
        empty: {
          animation: '',
          sound: {}
        },
        destroy: {
          animation: '',
          sound: {},
          projectileType: ''
        },
        create: {
          animation: '',
          sound: {},
          projectileType: ''
        },
        use: {
          tween: '',
          animation: '',
          sound: {},
          projectileType: ''
        }
      },
      'bulletDestroyedOnCollisionWithWall/unitStartPosition': {
        x: 0,
        y: 0,
        rotation: 0
      },
      'bulletDestroyedOnCollisionWithWall/unitDistance': 1300,
      penetration: false,
      destroyTimer: 100000,
      particles: {},
      damage: {},
      sound: {},
      canBeUsedBy: [
        'survivor'
      ],
      isUsedOnPickup: false,
      removeWhenEmpty: true,
      bonus: {
        consume: {
          playerAttribute: {},
          unitAttribute: {
            health: 15
          },
          coin: 0
        },
        passive: {
          playerAttribute: {},
          unitAttribute: {}
        },
        isConsumedImmediately: false
      },
      cost: {},
      buffTypes: [],
      carriedBy: []
    },
    HBlfzHEdHP: {
      carriedBy: [],
      buffTypes: [],
      cost: {},
      bonus: {
        isConsumedImmediately: false,
        passive: {
          unitAttribute: {},
          playerAttribute: {}
        },
        consume: {
          coin: 0,
          unitAttribute: {},
          playerAttribute: {}
        }
      },
      removeWhenEmpty: true,
      isUsedOnPickup: false,
      canBeUsedBy: [],
      sound: {},
      damage: {},
      particles: {},
      destroyTimer: 100000,
      penetration: false,
      'bulletDestroyedOnCollisionWithWall/unitDistance': 1300,
      'bulletDestroyedOnCollisionWithWall/unitStartPosition': {
        rotation: 0,
        y: 0,
        x: 0
      },
      effects: {
        use: {
          projectileType: '',
          sound: {},
          animation: '',
          tween: ''
        },
        create: {
          projectileType: '',
          sound: {},
          animation: ''
        },
        destroy: {
          projectileType: '',
          sound: {},
          animation: ''
        },
        empty: {
          sound: {},
          animation: ''
        },
        reload: {
          sound: {},
          animation: ''
        }
      },
      knockbackForce: 0,
      'bulletDestroyedOnCollisionWithWall/unitForce': 14,
      fireRate: 1000,
      recoilForce: 0,
      reloadRate: 2800,
      description: null,
      maxQuantity: 64,
      quantity: 1,
      projectileType: '',
      hideIfUnaffordable: true,
      bodies: {
        dropped: {
          itemAnchor: {
            y: 0,
            x: 0
          },
          unitAnchor: {
            x: 0,
            y: 53
          },
          jointType: 'weldJoint',
          fixtures: [
            {
              isSensor: true,
              shape: {
                type: 'rectangle'
              },
              restitution: 0,
              friction: 0,
              density: 1
            }
          ],
          spriteScale: 1,
          rotationSpeed: 1,
          linearDamping: 1,
          angularDamping: 1,
          collidesWith: {
            debris: false,
            walls: false,
            projectiles: false,
            items: false,
            units: false
          },
          allowSleep: true,
          'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
          fixedRotation: false,
          'z-index': {
            depth: 2,
            layer: 2
          },
          height: 34,
          width: 34,
          type: 'dynamic',
          name: 'dropped',
          bullet: false
        },
        selected: {
          itemAnchor: {
            x: 0,
            y: 53
          },
          unitAnchor: {
            x: 0,
            y: 0
          },
          jointType: 'weldJoint',
          fixtures: [
            {
              isSensor: false,
              shape: {
                type: 'rectangle'
              },
              restitution: 0.01,
              friction: 0.01,
              density: 1
            }
          ],
          spriteScale: 1,
          rotationSpeed: 3,
          linearDamping: 5,
          angularDamping: 1,
          collidesWith: {
            debris: false,
            walls: true,
            projectiles: true,
            items: true,
            units: true
          },
          allowSleep: true,
          'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
          fixedRotation: false,
          'z-index': {
            depth: 4,
            layer: 3
          },
          height: 34,
          width: 34,
          type: 'spriteOnly',
          name: 'selected'
        }
      },
      animations: {
        default: {
          framesPerSecond: 0,
          loopCount: 0,
          frames: [
            1
          ],
          name: 'default'
        },
        dropped: {
          loopCount: 0,
          framesPerSecond: 0,
          frames: [
            1
          ],
          name: 'dropped'
        }
      },
      states: {
        dropped: {
          sound: {},
          particles: {},
          body: 'dropped',
          animation: 'default',
          name: 'dropped'
        },
        unselected: {
          sound: {},
          particles: {},
          body: 'none',
          animation: 'none',
          name: 'unselected'
        },
        selected: {
          sound: {},
          particles: {},
          body: 'selected',
          animation: 'default',
          name: 'selected'
        }
      },
      hits: [],
      type: 'unusable',
      'bulletDestroyedOnCollisionWithWall/unitType': 'raycast',
      isGun: false,
      canBePurchasedBy: [],
      isPurchasable: false,
      isStackable: false,
      inventoryImage: null,
      cellSheet: {
        columnCount: 1,
        rowCount: 1,
        url: 'https://cache.modd.io/asset/spriteImage/1589857655168_fur.png'
      },
      price: {
        requiredItemTypes: {},
        playerAttributes: {}
      },
      variables: {},
      attributes: {},
      handle: '',
      name: 'Fur',
      bulletStartPosition: {
        x: 0,
        y: 0,
        rotation: 0
      },
      frames: {},
      controls: {
        mouseBehaviour: {
          rotateToFaceMouseCursor: true,
          flipSpriteHorizontallyWRTMouse: false
        },
        permittedInventorySlots: [],
        undroppable: false
      },
      delayBeforeUse: 0,
      damageHitBox: {
        width: 60,
        offsetX: 0,
        offsetY: 50
      },
      lifeSpan: 100000,
      confinedWithinMapBoundaries: true
    },
    wkuPHP94bA: {
      carriedBy: [],
      buffTypes: [],
      cost: {
        quantity: 0
      },
      bonus: {
        passive: {
          unitAttribute: {
            health: {
              value: 100
            }
          },
          playerAttribute: {}
        },
        consume: {
          unitAttribute: {},
          playerAttribute: {}
        }
      },
      removeWhenEmpty: false,
      isUsedOnPickup: false,
      canBeUsedBy: [],
      sound: {},
      damage: {
        unitAttributes: {
          health: 10
        }
      },
      particles: {},
      destroyTimer: 30000,
      penetration: false,
      'bulletDestroyedOnCollisionWithWall/unitDistance': 1300,
      'bulletDestroyedOnCollisionWithWall/unitStartPosition': {
        rotation: 0,
        y: 0,
        x: 0
      },
      effects: {
        empty: {
          sound: {},
          animation: ''
        },
        reload: {
          sound: {},
          animation: ''
        },
        destroy: {
          animation: '',
          sound: {},
          projectileType: ''
        },
        create: {
          animation: '',
          sound: {},
          projectileType: ''
        },
        use: {
          tween: 'none',
          animation: 'use',
          sound: {},
          projectileType: ''
        }
      },
      knockbackForce: 0,
      'bulletDestroyedOnCollisionWithWall/unitForce': 14,
      fireRate: 500,
      recoilForce: 0,
      reloadRate: 2800,
      description: null,
      maxQuantity: null,
      quantity: null,
      projectileType: '',
      hideIfUnaffordable: false,
      bodies: {
        dropped: {
          bullet: false,
          itemAnchor: {
            y: 0,
            x: 0
          },
          unitAnchor: {
            rotation: 0,
            x: 0,
            y: -5
          },
          jointType: 'weldJoint',
          fixtures: [
            {
              isSensor: true,
              shape: {
                type: 'rectangle'
              },
              restitution: 0.01,
              friction: 0.01,
              density: 1
            }
          ],
          spriteScale: 1,
          rotationSpeed: 1,
          linearDamping: 1,
          angularDamping: 1,
          collidesWith: {
            debris: false,
            walls: false,
            projectiles: false,
            items: false,
            units: false
          },
          allowSleep: true,
          'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
          fixedRotation: false,
          'z-index': {
            depth: 2,
            layer: 1
          },
          height: 34,
          width: 30,
          type: 'dynamic',
          name: 'dropped'
        },
        selected: {
          itemAnchor: {
            y: 0,
            x: 0
          },
          unitAnchor: {
            x: 0,
            y: -5,
            rotation: 0
          },
          jointType: 'weldJoint',
          fixtures: [
            {
              isSensor: false,
              shape: {
                type: 'rectangle'
              },
              restitution: 0.01,
              friction: 0.01,
              density: 1
            }
          ],
          spriteScale: 1,
          rotationSpeed: 3,
          linearDamping: 5,
          angularDamping: 1,
          collidesWith: {
            debris: false,
            walls: true,
            projectiles: true,
            items: true,
            units: true
          },
          allowSleep: true,
          'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
          fixedRotation: false,
          'z-index': {
            depth: 4,
            layer: 3
          },
          height: 34,
          width: 30,
          type: 'spriteOnly',
          name: 'selected'
        }
      },
      animations: {
        default: {
          name: 'default',
          frames: [
            1
          ],
          loopCount: null,
          framesPerSecond: null
        }
      },
      states: {
        dropped: {
          sound: {},
          particles: {},
          body: 'dropped',
          animation: 'default',
          name: 'dropped'
        },
        unselected: {
          sound: {},
          particles: {},
          body: 'selected',
          animation: 'none',
          name: 'unselected'
        },
        selected: {
          sound: {},
          particles: {},
          body: 'selected',
          animation: 'default',
          name: 'selected'
        }
      },
      hits: [],
      type: 'weapon',
      'bulletDestroyedOnCollisionWithWall/unitType': 'raycast',
      isGun: false,
      canBePurchasedBy: [],
      isPurchasable: true,
      isStackable: false,
      inventoryImage: null,
      cellSheet: {
        columnCount: 1,
        rowCount: 1,
        url: 'https://cache.modd.io/asset/spriteImage/1589846449835_helmet.png'
      },
      variables: {},
      attributes: {},
      handle: '',
      name: 'Fur Helmet',
      frames: {},
      bulletStartPosition: {
        x: 0,
        y: 0,
        rotation: 0
      },
      damageHitBox: {
        width: 38,
        height: 30,
        offsetX: 0,
        offsetY: 50
      },
      damageDelay: 0,
      controls: {
        undroppable: false,
        designatedInventorySlot: 1,
        mouseBehaviour: {
          rotateToFaceMouseCursor: true,
          flipSpriteHorizontallyWRTMouse: false
        },
        permittedInventorySlots: []
      },
      lifeSpan: 60000,
      confinedWithinMapBoundaries: true,
      delayBeforeUse: 0
    },
    cFmwF64UTq: {
      damageHitBox: {
        offsetY: 500000000,
        offsetX: 0,
        width: 0
      },
      delayBeforeUse: 0,
      controls: {
        undroppable: false,
        permittedInventorySlots: [],
        mouseBehaviour: {
          flipSpriteHorizontallyWRTMouse: false,
          rotateToFaceMouseCursor: true
        },
        canMerge: true,
        backpackAllowed: true
      },
      frames: {},
      bulletStartPosition: {
        rotation: 0,
        y: 0,
        x: 0
      },
      name: 'Wooden Wall2',
      handle: '',
      attributes: {},
      variables: {},
      price: {
        playerAttributes: {},
        requiredItemTypes: {}
      },
      cellSheet: {
        url: 'https://cache.modd.io/asset/spriteImage/1704856167311_wooden_wall.png',
        rowCount: 1,
        columnCount: 1
      },
      inventoryImage: 'https://cache.modd.io/asset/spriteImage/1704856167311_wooden_wall.png',
      isStackable: false,
      isPurchasable: false,
      canBePurchasedBy: [],
      isGun: false,
      'bulletDestroyedOnCollisionWithWall/unitType': 'raycast',
      type: 'weapon',
      hits: [],
      states: {
        selected: {
          name: 'selected',
          animation: 'default',
          body: 'selected',
          particles: {},
          sound: {}
        },
        unselected: {
          name: 'unselected',
          animation: 'none',
          body: 'none',
          particles: {},
          sound: {}
        },
        dropped: {
          name: 'dropped',
          animation: 'default',
          body: 'dropped',
          particles: {},
          sound: {}
        }
      },
      animations: {
        dropped: {
          name: 'dropped',
          frames: [
            1
          ],
          framesPerSecond: 0,
          loopCount: 0
        },
        default: {
          name: 'default',
          frames: [
            1
          ],
          loopCount: 0,
          framesPerSecond: 0
        }
      },
      bodies: {
        selected: {
          name: 'selected',
          type: 'spriteOnly',
          width: 128,
          height: 128,
          'z-index': {
            layer: 3,
            depth: 4
          },
          fixedRotation: false,
          'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
          allowSleep: true,
          collidesWith: {
            units: true,
            items: true,
            projectiles: true,
            walls: true,
            debris: false
          },
          angularDamping: 1,
          linearDamping: 5,
          rotationSpeed: 3,
          spriteScale: 1,
          fixtures: [
            {
              density: 1,
              friction: 0.01,
              restitution: 0.01,
              shape: {
                type: 'rectangle'
              },
              isSensor: false
            }
          ],
          jointType: 'weldJoint',
          unitAnchor: {
            y: 80,
            x: 0
          },
          itemAnchor: {
            x: 0,
            y: 0
          }
        },
        dropped: {
          bullet: false,
          name: 'dropped',
          type: 'dynamic',
          width: 64,
          height: 64,
          'z-index': {
            layer: 2,
            depth: 2
          },
          fixedRotation: false,
          'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
          allowSleep: true,
          collidesWith: {
            units: false,
            items: false,
            projectiles: false,
            walls: false,
            debris: false
          },
          angularDamping: 1,
          linearDamping: 1,
          rotationSpeed: 1,
          spriteScale: 1,
          fixtures: [
            {
              density: 1,
              friction: 0,
              restitution: 0,
              shape: {
                type: 'rectangle'
              },
              isSensor: true
            }
          ],
          jointType: 'weldJoint',
          unitAnchor: {
            y: 68,
            x: 0
          },
          itemAnchor: {
            y: 0,
            x: 0
          }
        }
      },
      hideIfUnaffordable: true,
      projectileType: '',
      quantity: 99999,
      maxQuantity: 99999,
      description: null,
      reloadRate: 2800,
      recoilForce: 0,
      fireRate: 333,
      'bulletDestroyedOnCollisionWithWall/unitForce': 14,
      knockbackForce: 0,
      effects: {
        reload: {
          animation: '',
          sound: {}
        },
        empty: {
          animation: '',
          sound: {}
        },
        destroy: {
          animation: '',
          sound: {},
          projectileType: ''
        },
        create: {
          animation: '',
          sound: {},
          projectileType: ''
        },
        use: {
          tween: '',
          animation: '',
          sound: {},
          projectileType: ''
        }
      },
      'bulletDestroyedOnCollisionWithWall/unitStartPosition': {
        x: 0,
        y: 0,
        rotation: 0
      },
      'bulletDestroyedOnCollisionWithWall/unitDistance': 1300,
      penetration: false,
      destroyTimer: 100000,
      particles: {},
      damage: {},
      sound: {},
      canBeUsedBy: [],
      isUsedOnPickup: false,
      removeWhenEmpty: true,
      bonus: {
        consume: {
          coin: 0,
          playerAttribute: {},
          unitAttribute: {}
        },
        passive: {
          playerAttribute: {},
          unitAttribute: {},
          isDisabledInBackpack: false
        },
        isConsumedImmediately: false
      },
      cost: {
        quantity: 0
      },
      buffTypes: [],
      carriedBy: [],
      scripts: {
        '6tI0cXxGUH': {
          triggers: [
            {
              type: 'itemIsUsed'
            }
          ],
          conditions: [
            {
              operator: '==',
              operandType: 'boolean'
            },
            true,
            true
          ],
          actions: [
            {
              type: 'condition',
              conditions: [
                {
                  operator: '<',
                  operandType: 'number'
                },
                {
                  function: 'getEntityAttribute',
                  attribute: 'Ar3OMCccmn',
                  entity: {
                    function: 'getOwnerOfItem',
                    entity: {
                      function: 'thisEntity'
                    }
                  }
                },
                30
              ],
              then: [
                {
                  type: 'createUnitAtPosition',
                  unitType: 'RRl7Rgq0i1',
                  entity: {
                    function: 'getVariable',
                    variableName: 'AI neutral'
                  },
                  position: {
                    function: 'getMouseCursorPosition',
                    player: {
                      function: 'getOwner',
                      entity: {
                        function: 'getOwnerOfItem',
                        entity: {
                          function: 'thisEntity'
                        }
                      }
                    }
                  },
                  angle: 0
                },
                {
                  type: 'setEntityVariable',
                  entity: {
                    function: 'getLastCreatedUnit'
                  },
                  variable: {
                    function: 'getEntityVariable',
                    variable: {
                      text: 'host',
                      dataType: 'string',
                      entity: 'bear',
                      key: 'host'
                    }
                  },
                  value: {
                    function: 'getPlayerName',
                    entity: {
                      function: 'getOwner',
                      entity: {
                        function: 'getOwnerOfItem',
                        entity: {
                          function: 'thisEntity'
                        }
                      }
                    }
                  }
                },
                {
                  type: 'moveEntity',
                  entity: {
                    function: 'getLastCreatedUnit'
                  },
                  position: {
                    function: 'xyCoordinate',
                    x: {
                      function: 'calculate',
                      items: [
                        {
                          operator: '/'
                        },
                        {
                          function: 'getPositionX',
                          position: {
                            function: 'getEntityPosition',
                            entity: {
                              function: 'getLastCreatedUnit'
                            }
                          }
                        },
                        128
                      ]
                    },
                    y: {
                      function: 'calculate',
                      items: [
                        {
                          operator: '/'
                        },
                        {
                          function: 'getPositionY',
                          position: {
                            function: 'getEntityPosition',
                            entity: {
                              function: 'getLastCreatedUnit'
                            }
                          }
                        },
                        128
                      ]
                    }
                  },
                  actionId: '36282475'
                },
                {
                  type: 'moveEntity',
                  entity: {
                    function: 'getLastCreatedUnit'
                  },
                  position: {
                    function: 'xyCoordinate',
                    x: {
                      function: 'mathFloor',
                      value: {
                        function: 'getPositionX',
                        position: {
                          function: 'getEntityPosition',
                          entity: {
                            function: 'getLastCreatedUnit'
                          }
                        }
                      }
                    },
                    y: {
                      function: 'mathFloor',
                      value: {
                        function: 'getPositionY',
                        position: {
                          function: 'getEntityPosition',
                          entity: {
                            function: 'getLastCreatedUnit'
                          }
                        }
                      }
                    }
                  }
                },
                {
                  type: 'moveEntity',
                  entity: {
                    function: 'getLastCreatedUnit'
                  },
                  position: {
                    function: 'xyCoordinate',
                    x: {
                      function: 'calculate',
                      items: [
                        {
                          operator: '*'
                        },
                        {
                          function: 'getPositionX',
                          position: {
                            function: 'getEntityPosition',
                            entity: {
                              function: 'getLastCreatedUnit'
                            }
                          }
                        },
                        128
                      ]
                    },
                    y: {
                      function: 'calculate',
                      items: [
                        {
                          operator: '*'
                        },
                        {
                          function: 'getPositionY',
                          position: {
                            function: 'getEntityPosition',
                            entity: {
                              function: 'getLastCreatedUnit'
                            }
                          }
                        },
                        128
                      ]
                    }
                  },
                  actionId: '1f30f71d'
                },
                {
                  type: 'moveEntity',
                  entity: {
                    function: 'getLastCreatedUnit'
                  },
                  position: {
                    function: 'xyCoordinate',
                    x: {
                      function: 'calculate',
                      items: [
                        {
                          operator: '+'
                        },
                        {
                          function: 'getPositionX',
                          position: {
                            function: 'getEntityPosition',
                            entity: {
                              function: 'getLastCreatedUnit'
                            }
                          }
                        },
                        64
                      ]
                    },
                    y: {
                      function: 'calculate',
                      items: [
                        {
                          operator: '+'
                        },
                        {
                          function: 'getPositionY',
                          position: {
                            function: 'getEntityPosition',
                            entity: {
                              function: 'getLastCreatedUnit'
                            }
                          }
                        },
                        64
                      ]
                    }
                  },
                  actionId: '349d849b'
                },
                {
                  type: 'setEntityAttribute',
                  attribute: 'Ar3OMCccmn',
                  entity: {
                    function: 'getOwnerOfItem',
                    entity: {
                      function: 'thisEntity'
                    }
                  },
                  value: {
                    function: 'calculate',
                    items: [
                      {
                        operator: '+'
                      },
                      {
                        function: 'getEntityAttribute',
                        attribute: 'Ar3OMCccmn',
                        entity: {
                          function: 'getOwnerOfItem',
                          entity: {
                            function: 'thisEntity'
                          }
                        }
                      },
                      1
                    ]
                  }
                },
                {
                  type: 'updateItemQuantity',
                  entity: {
                    function: 'thisEntity'
                  },
                  quantity: {
                    function: 'calculate',
                    items: [
                      {
                        operator: '-'
                      },
                      {
                        function: 'getItemQuantity',
                        item: {
                          function: 'thisEntity'
                        }
                      },
                      1
                    ]
                  }
                },
                {
                  type: 'createFloatingText',
                  text: {
                    function: 'concat',
                    textA: 'Build Capacity: ',
                    textB: {
                      function: 'calculate',
                      items: [
                        {
                          operator: '+'
                        },
                        {
                          function: 'getEntityAttribute',
                          attribute: 'Ar3OMCccmn',
                          entity: {
                            function: 'getOwnerOfItem',
                            entity: {
                              function: 'thisEntity'
                            }
                          }
                        },
                        1
                      ]
                    }
                  },
                  position: {
                    function: 'getEntityPosition',
                    entity: {
                      function: 'getOwnerOfItem',
                      entity: {
                        function: 'thisEntity'
                      }
                    }
                  },
                  color: 'white'
                }
              ],
              else: [
                {
                  type: 'createFloatingText',
                  text: 'Build Limit Reached!',
                  position: {
                    function: 'getEntityPosition',
                    entity: {
                      function: 'getOwnerOfItem',
                      entity: {
                        function: 'thisEntity'
                      }
                    }
                  },
                  color: 'white'
                }
              ]
            }
          ],
          name: 'use',
          parent: null,
          key: '6tI0cXxGUH',
          order: 2
        }
      },
      streamMode: 1,
      confinedWithinMapBoundaries: true,
      lifeSpan: 60000,
      projectileStreamMode: '0',
      showCDOverlay: false
    }
  },
  music: {},
  sound: {},
  scripts: {
    playerJoinsGame: {
      name: 'player joins',
      triggers: [
        {
          type: 'playerJoinsGame'
        }
      ],
      conditions: [],
      actions: [
        {
          angle: 0,
          entity: {
            function: 'getTriggeringPlayer'
          },
          position: {
            function: 'getRandomPositionInRegion',
            region: {
              function: 'getEntireMapRegion'
            }
          },
          unitType: 'survivor',
          type: 'createUnitAtPosition'
        },
        {
          player: {
            function: 'getTriggeringPlayer'
          },
          type: 'playerCameraTrackUnit',
          survivor: {
            function: 'getTriggeringPlayer'
          },
          unit: {
            function: 'getLastCreatedUnit'
          }
        },
        {
          playerType: 'humanPlayer',
          entity: {
            function: 'getTriggeringPlayer'
          },
          type: 'assignPlayerType'
        },
        {
          type: 'sendChatMessage',
          message: {
            function: 'entityName',
            entity: {
              function: 'selectedItem'
            }
          }
        }
      ],
      key: 'playerJoinsGame',
      parent: null,
      order: 1
    },
    playerLeavesGame: {
      triggers: [
        {
          type: 'playerLeavesGame'
        }
      ],
      conditions: [
        {
          operator: '==',
          operandType: 'boolean'
        },
        true,
        true
      ],
      actions: [
        {
          type: 'forAllUnits',
          unitGroup: {
            player: {
              function: 'getTriggeringPlayer'
            },
            function: 'allUnitsOwnedByPlayer',
            survivor: {
              function: 'getTriggeringPlayer'
            }
          },
          actions: [
            {
              entity: {
                function: 'selectedUnit'
              },
              type: 'destroyEntity'
            }
          ],
          comment: 'when a player leaves, destroy all units owned by that player'
        }
      ],
      name: 'player leaves',
      parent: null,
      key: 'playerLeavesGame',
      order: 2
    },
    unitDeath: {
      order: 4,
      key: 'unitDeath',
      parent: null,
      name: 'unit death',
      actions: [
        {
          type: 'condition',
          conditions: [
            {
              operandType: 'attributeType',
              operator: '=='
            },
            {
              function: 'getAttributeTypeOfAttribute',
              entity: {
                function: 'getTriggeringAttribute'
              }
            },
            'health'
          ],
          then: [
            {
              else: [],
              then: [
                {
                  comment: 'start respawn timer (it goes from 0 to 100)',
                  type: 'setPlayerAttribute',
                  attribute: 'respawnTimer',
                  entity: {
                    function: 'getOwner',
                    entity: {
                      function: 'getTriggeringUnit'
                    }
                  },
                  value: 0
                },
                {
                  entity: {
                    function: 'getTriggeringUnit'
                  },
                  type: 'dropAllItems',
                  disabled: false
                }
              ],
              conditions: [
                {
                  operator: '==',
                  operandType: 'unitType'
                },
                {
                  entity: {
                    function: 'getTriggeringUnit'
                  },
                  function: 'getUnitTypeOfUnit'
                },
                'survivor'
              ],
              type: 'condition'
            },
            {
              else: [],
              then: [
                {
                  type: 'spawnItem',
                  itemType: 'HBlfzHEdHP',
                  position: {
                    function: 'getEntityPosition',
                    entity: {
                      function: 'getTriggeringUnit'
                    }
                  }
                }
              ],
              conditions: [
                {
                  operator: '==',
                  operandType: 'unitType'
                },
                {
                  entity: {
                    function: 'getTriggeringUnit'
                  },
                  function: 'getUnitTypeOfUnit'
                },
                'bear'
              ],
              type: 'condition'
            },
            {
              else: [],
              then: [
                {
                  type: 'spawnItem',
                  itemType: 's2vnp9Ph2d',
                  position: {
                    function: 'getEntityPosition',
                    entity: {
                      function: 'getTriggeringUnit'
                    }
                  }
                }
              ],
              conditions: [
                {
                  operator: '==',
                  operandType: 'unitType'
                },
                {
                  entity: {
                    function: 'getTriggeringUnit'
                  },
                  function: 'getUnitTypeOfUnit'
                },
                'pig'
              ],
              type: 'condition'
            },
            {
              type: 'destroyEntity',
              entity: {
                function: 'getTriggeringUnit'
              }
            }
          ],
          else: []
        }
      ],
      conditions: [
        {
          operandType: 'boolean',
          operator: '=='
        },
        true,
        true
      ],
      triggers: [
        {
          type: 'unitAttributeBecomesZero'
        }
      ]
    },
    playerRespawn: {
      order: 3,
      key: 'playerRespawn',
      parent: null,
      name: 'player respawn',
      actions: [
        {
          vars: [
            {
              source: 'trigger',
              id: 'getTriggeringPlayer'
            },
            {
              source: 'trigger',
              id: 'getTriggeringAttribute'
            }
          ],
          type: 'condition',
          conditions: [
            {
              operandType: 'attributeType',
              operator: '=='
            },
            {
              vars: [
                {
                  source: 'trigger',
                  id: 'getTriggeringPlayer'
                },
                {
                  source: 'trigger',
                  id: 'getTriggeringAttribute'
                }
              ],
              function: 'getAttributeTypeOfAttribute',
              entity: {
                vars: [
                  {
                    source: 'trigger',
                    id: 'getTriggeringPlayer'
                  },
                  {
                    source: 'trigger',
                    id: 'getTriggeringAttribute'
                  }
                ],
                function: 'getTriggeringAttribute'
              }
            },
            'respawnTimer'
          ],
          then: [
            {
              vars: [
                {
                  source: 'trigger',
                  id: 'getTriggeringPlayer'
                },
                {
                  source: 'trigger',
                  id: 'getTriggeringAttribute'
                }
              ],
              type: 'createUnitAtPosition',
              unitType: 'survivor',
              position: {
                vars: [
                  {
                    source: 'trigger',
                    id: 'getTriggeringPlayer'
                  },
                  {
                    source: 'trigger',
                    id: 'getTriggeringAttribute'
                  }
                ],
                region: {
                  vars: [
                    {
                      source: 'trigger',
                      id: 'getTriggeringPlayer'
                    },
                    {
                      source: 'trigger',
                      id: 'getTriggeringAttribute'
                    }
                  ],
                  function: 'getEntireMapRegion'
                },
                function: 'getRandomPositionInRegion'
              },
              entity: {
                vars: [
                  {
                    source: 'trigger',
                    id: 'getTriggeringPlayer'
                  },
                  {
                    source: 'trigger',
                    id: 'getTriggeringAttribute'
                  }
                ],
                function: 'getTriggeringPlayer'
              },
              angle: 0
            },
            {
              vars: [
                {
                  source: 'trigger',
                  id: 'getTriggeringPlayer'
                },
                {
                  source: 'trigger',
                  id: 'getTriggeringAttribute'
                }
              ],
              player: {
                vars: [
                  {
                    source: 'trigger',
                    id: 'getTriggeringPlayer'
                  },
                  {
                    source: 'trigger',
                    id: 'getTriggeringAttribute'
                  }
                ],
                function: 'getTriggeringPlayer'
              },
              type: 'playerCameraTrackUnit',
              survivor: {
                function: 'getTriggeringPlayer'
              },
              unit: {
                vars: [
                  {
                    source: 'trigger',
                    id: 'getTriggeringPlayer'
                  },
                  {
                    source: 'trigger',
                    id: 'getTriggeringAttribute'
                  }
                ],
                function: 'getLastCreatedUnit'
              }
            }
          ],
          else: [],
          comment: 'respawn players'
        }
      ],
      conditions: [
        {
          operandType: 'boolean',
          operator: '=='
        },
        true,
        true
      ],
      triggers: [
        {
          type: 'playerAttributeBecomesFull'
        }
      ]
    },
    initialize: {
      isProtected: true,
      triggers: [
        {
          type: 'gameStart'
        }
      ],
      actions: [
        {
          playerType: 'aiNeutral',
          entity: {
            variableName: 'AI neutral',
            function: 'getVariable'
          },
          type: 'assignPlayerType'
        },
        {
          playerType: 'aiHostile',
          entity: {
            variableName: 'AI hostile',
            function: 'getVariable'
          },
          type: 'assignPlayerType'
        },
        {
          type: 'repeat',
          count: 8,
          actions: [
            {
              angle: 0,
              position: {
                region: {
                  function: 'getEntireMapRegion'
                },
                function: 'getRandomPositionInRegion'
              },
              entity: {
                function: 'getVariable',
                variableName: 'AI resources'
              },
              unitType: 'tree',
              type: 'createUnitAtPosition'
            }
          ]
        },
        {
          actions: [
            {
              type: 'createUnitAtPosition',
              unitType: 'rock',
              entity: {
                function: 'getVariable',
                variableName: 'AI resources'
              },
              position: {
                function: 'getRandomPositionInRegion',
                region: {
                  function: 'getEntireMapRegion'
                }
              },
              angle: 0
            }
          ],
          count: 5,
          type: 'repeat'
        }
      ],
      name: 'initialize',
      parent: null,
      key: 'initialize',
      order: -1
    },
    gatherResources: {
      triggers: [
        {
          type: 'unitAttacksUnit'
        }
      ],
      conditions: [
        {
          operator: '==',
          operandType: 'boolean'
        },
        true,
        true
      ],
      actions: [
        {
          comment: '',
          value: {
            items: [
              {
                operator: '+'
              },
              {
                entity: {
                  entity: {
                    function: 'getLastAttackingUnit'
                  },
                  function: 'getOwner'
                },
                attribute: 'qo4uN9R1Uj',
                function: 'getPlayerAttribute'
              },
              1
            ],
            function: 'calculate'
          },
          entity: {
            entity: {
              function: 'getLastAttackingUnit'
            },
            function: 'getOwner'
          },
          attribute: 'qo4uN9R1Uj',
          type: 'setPlayerAttribute'
        },
        {
          else: [],
          then: [
            {
              type: 'setPlayerAttribute',
              attribute: 'wood',
              entity: {
                function: 'getOwner',
                entity: {
                  function: 'getLastAttackingUnit'
                }
              },
              value: {
                function: 'calculate',
                items: [
                  {
                    operator: '+'
                  },
                  {
                    function: 'getPlayerAttribute',
                    attribute: 'wood',
                    entity: {
                      function: 'getOwner',
                      entity: {
                        function: 'getLastAttackingUnit'
                      }
                    }
                  },
                  1
                ]
              },
              comment: 'give wood to the owner of last attacking unit (player is the owner of a unit)'
            }
          ],
          conditions: [
            {
              operator: '==',
              operandType: 'unitType'
            },
            {
              entity: {
                function: 'getLastAttackedUnit'
              },
              function: 'getUnitTypeOfUnit'
            },
            'tree'
          ],
          type: 'condition'
        },
        {
          else: [],
          then: [
            {
              comment: 'give stone to the owner of last attacking unit (player is the owner of a unit)',
              type: 'setPlayerAttribute',
              attribute: 'stone',
              entity: {
                function: 'getOwner',
                entity: {
                  function: 'getLastAttackingUnit'
                }
              },
              value: {
                function: 'calculate',
                items: [
                  {
                    operator: '+'
                  },
                  {
                    function: 'getPlayerAttribute',
                    attribute: 'stone',
                    entity: {
                      function: 'getOwner',
                      entity: {
                        function: 'getLastAttackingUnit'
                      }
                    }
                  },
                  1
                ]
              }
            }
          ],
          conditions: [
            {
              operator: '==',
              operandType: 'unitType'
            },
            {
              entity: {
                function: 'getLastAttackedUnit'
              },
              function: 'getUnitTypeOfUnit'
            },
            'rock'
          ],
          type: 'condition'
        }
      ],
      name: 'gather resources',
      parent: null,
      key: 'gatherResources',
      order: 6
    },
    pgZxajB0mI: {
      triggers: [],
      conditions: [
        {
          operator: '==',
          operandType: 'boolean'
        },
        true,
        true
      ],
      actions: [
        {
          vars: [],
          comment: 'last casting unit belongs to whoever pressed a key (player is the owner of a unit)',
          type: 'openShopForPlayer',
          shop: 'mainShop',
          player: {
            vars: [],
            function: 'getOwner',
            entity: {
              vars: [],
              function: 'getLastCastingUnit'
            }
          }
        }
      ],
      name: 'open shop',
      parent: null,
      key: 'pgZxajB0mI',
      order: 8
    },
    nKOWaC2NkX: {
      triggers: [
        {
          type: 'unitUsesItem'
        }
      ],
      conditions: [
        {
          operator: '==',
          operandType: 'boolean'
        },
        true,
        true
      ],
      actions: [
        {
          type: 'sendChatMessage',
          message: {
            function: 'stringToNumber',
            value: {
              function: 'calculate',
              items: [
                {
                  operator: '-'
                },
                {
                  function: 'getValueOfEntityVariable',
                  variable: {
                    function: 'getEntityVariable',
                    variable: {
                      text: 'host',
                      dataType: 'string',
                      entity: 'survivor',
                      key: 'host'
                    }
                  },
                  entity: {
                    function: 'getSelectedEntity'
                  }
                },
                100
              ]
            }
          }
        },
        {
          type: 'sendChatMessage',
          message: 'other actions'
        },
        {
          type: 'sendChatMessage',
          message: 'other actions'
        },
        {
          type: 'sendChatMessage',
          message: 'other actions'
        },
        {
          type: 'sendChatMessage',
          message: {
            function: 'stringToNumber',
            value: {
              function: 'calculate',
              items: [
                {
                  operator: '-'
                },
                {
                  function: 'getValueOfEntityVariable',
                  variable: {
                    function: 'getEntityVariable',
                    variable: {
                      text: 'host',
                      dataType: 'string',
                      entity: 'survivor',
                      key: 'host'
                    }
                  },
                  entity: {
                    function: 'getSelectedEntity'
                  }
                },
                100
              ]
            }
          }
        }
      ],
      name: 'testing case',
      parent: null,
      key: 'nKOWaC2NkX',
      order: 7
    }
  },
  unitTypes: {
    bear: {
      defaultItem: [],
      controls: {
        movementMethod: 'velocity',
        movementControlScheme: 'wasd',
        abilities: {
          movementWheel: {
            mobilePosition: {
              y: 204,
              x: 35
            }
          },
          lookWheel: {
            mobilePosition: {
              y: 204,
              x: 407
            }
          }
        },
        mouseBehaviour: {
          flipSpriteHorizontallyWRTMouse: false,
          rotateToFaceMouseCursor: true
        },
        movementType: 'wasd',
        permittedInventorySlots: []
      },
      inventoryImage: '',
      animations: {
        default: {
          framesPerSecond: 0,
          loopCount: 0,
          frames: [
            1
          ],
          name: 'default'
        }
      },
      canBePurchasedBy: [],
      isPurchasable: false,
      states: {
        default: {
          name: 'default',
          sound: {},
          particles: {},
          animation: 'default',
          body: 'default'
        }
      },
      sound: {
        KK9JlU1UQy: {
          name: 'Cough',
          file: 'https://modd.s3.amazonaws.com/asset/sound/1517554516253_man_cough.mp3'
        },
        fEhDyJ8knx: {
          name: 'Scream',
          file: 'https://modd.s3.amazonaws.com/asset/sound/1517556903046_man_scream1.mp3'
        }
      },
      particles: {},
      body: {
        spriteScale: 1,
        fixtures: [
          {
            shape: {
              type: 'rectangle'
            },
            restitution: 0.01,
            friction: 0.01,
            density: 3
          }
        ],
        isFlying: false,
        fixedRotation: false,
        'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
        allowSleep: true,
        angularDamping: 1,
        linearDamping: 5,
        rotationSpeed: 2,
        type: 'dynamic',
        height: 40,
        width: 40,
        collidesWith: {
          units: true,
          items: true,
          projectiles: true,
          walls: true,
          unit: true,
          item: true,
          debris: true
        },
        'z-index': {
          layer: 3,
          depth: 3
        },
        name: 'Human-body'
      },
      spawnPosition: {
        y: 2200,
        x: 1500
      },
      attributes: {
        speed: {
          decimalPlaces: 0,
          dataType: '',
          name: 'speed',
          min: 0,
          max: 200,
          value: 9,
          regenerateSpeed: 0,
          isVisible: [],
          showAsHUD: true,
          color: '#00fff0',
          displayValue: true
        },
        health: {
          decimalPlaces: 0,
          color: '#ffff0f',
          showAsHUD: true,
          displayValue: true,
          isVisible: [
            'centerBar',
            'unitBarHostile',
            'unitBarNeutral',
            'unitBarFriendly'
          ],
          regenerateSpeed: '.1',
          value: 100,
          dataType: '',
          max: 100,
          min: 0,
          name: 'health '
        }
      },
      abilitiesJ8Gtv5hQ8j: {
        movementWheel: {
          mobilePosition: {
            y: 204,
            x: 35
          }
        },
        lookWheel: {
          mobilePosition: {
            y: 204,
            x: 407
          }
        },
        w: {
          keyUp: 'stopMovingUp',
          keyDown: 'moveUp'
        },
        a: {
          keyUp: 'stopMovingLeft',
          keyDown: 'moveLeft'
        },
        s: {
          keyUp: 'stopMovingDown',
          keyDown: 'moveDown'
        },
        d: {
          keyUp: 'stopMovingRight',
          keyDown: 'moveRight'
        },
        button1: {
          keyUp: 'stopUsingItem',
          keyDown: 'startUsingItem',
          mobilePosition: {
            x: 326,
            y: 132
          }
        },
        up: {
          keyUp: 'stopMovingUp',
          keyDown: 'moveUp'
        },
        down: {
          keyUp: 'stopMovingDown',
          keyDown: 'moveDown'
        },
        left: {
          keyUp: 'stopMovingLeft',
          keyDown: 'moveLeft'
        },
        right: {
          keyUp: 'stopMovingRight',
          keyDown: 'moveRight'
        },
        e: {
          keyUp: '',
          keyDown: 'pickUp',
          mobilePosition: {
            x: 366,
            y: 85
          }
        },
        f: {
          keyUp: '',
          keyDown: 'pickUp'
        },
        g: {
          keyUp: '',
          keyDown: 'drop',
          mobilePosition: {
            x: 365,
            y: 33
          }
        },
        b: {
          keyUp: '',
          keyDown: 'shop',
          mobilePosition: {
            x: 419,
            y: 32
          }
        }
      },
      baseSpeed: 53,
      price: {},
      skin: 'https://s3-us-west-1.amazonaws.com/modd/halloween-0.18/spritesheet/man.png',
      canBuyItem: true,
      handle: 'human',
      name: 'Bear',
      inventorySize: 1,
      cellSheet: {
        columnCount: 1,
        rowCount: 1,
        url: 'https://cache.modd.io/asset/spriteImage/1589645036846_brown_bear.png'
      },
      bodies: {
        default: {
          bullet: false,
          name: 'default',
          type: 'dynamic',
          width: 100,
          height: 100,
          'z-index': {
            layer: 3,
            depth: 3
          },
          fixedRotation: false,
          'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
          allowSleep: true,
          collidesWith: {
            units: true,
            items: true,
            projectiles: true,
            walls: true,
            debris: true
          },
          angularDamping: 1,
          linearDamping: 8,
          rotationSpeed: 1,
          spriteScale: 1,
          fixtures: [
            {
              density: 1,
              friction: 0,
              restitution: 0,
              shape: {
                type: 'circle'
              },
              isSensor: false
            }
          ],
          jointType: 'weldJoint',
          unitAnchor: {
            x: 0,
            y: 33,
            rotation: 0
          },
          itemAnchor: {
            x: 0,
            y: 0,
            lowerAngle: 0,
            upperAngle: 0
          }
        }
      },
      variables: {},
      effects: {
        destroy: {
          runScript: '',
          animation: '',
          sound: {},
          projectileType: 'blood'
        },
        create: {
          runScript: '',
          animation: '',
          sound: {},
          projectileType: ''
        },
        move: {
          runScript: '',
          animation: '',
          sound: {},
          projectileType: ''
        },
        attacked: {
          runScript: '',
          tween: 'recoil',
          animation: '',
          sound: {},
          projectileType: ''
        },
        idle: {
          runScript: '',
          tween: '',
          animation: '',
          sound: {},
          projectileType: ''
        }
      },
      confinedWithinMapBoundaries: true,
      ai: {
        pathFindingMethod: 'simple',
        idleBehaviour: 'wander',
        sensorResponse: 'fight',
        attackResponse: 'fight',
        maxTravelDistance: 1000,
        sensorRadius: 150,
        maxAttackRange: 10,
        enabled: true
      },
      defaultItems: [
        {
          name: 'Melee Attack',
          value: 'Melee Attack',
          key: 'meleeAttack'
        }
      ],
      backpackSize: 0
    },
    pig: {
      defaultItem: [],
      controls: {
        movementMethod: 'velocity',
        movementControlScheme: 'wasd',
        abilities: {
          movementWheel: {
            mobilePosition: {
              y: 204,
              x: 35
            }
          },
          lookWheel: {
            mobilePosition: {
              y: 204,
              x: 407
            }
          }
        },
        mouseBehaviour: {
          flipSpriteHorizontallyWRTMouse: false,
          rotateToFaceMouseCursor: true
        },
        movementType: 'wasd',
        permittedInventorySlots: []
      },
      inventoryImage: '',
      animations: {
        default: {
          framesPerSecond: 0,
          loopCount: 0,
          frames: [
            1
          ],
          name: 'default'
        }
      },
      canBePurchasedBy: [],
      isPurchasable: false,
      states: {
        default: {
          name: 'default',
          sound: {},
          particles: {},
          animation: 'default',
          body: 'default'
        }
      },
      sound: {
        KK9JlU1UQy: {
          name: 'Cough',
          file: 'https://modd.s3.amazonaws.com/asset/sound/1517554516253_man_cough.mp3'
        },
        fEhDyJ8knx: {
          name: 'Scream',
          file: 'https://modd.s3.amazonaws.com/asset/sound/1517556903046_man_scream1.mp3'
        }
      },
      particles: {},
      body: {
        spriteScale: 1,
        fixtures: [
          {
            shape: {
              type: 'rectangle'
            },
            restitution: 0.01,
            friction: 0.01,
            density: 3
          }
        ],
        isFlying: false,
        fixedRotation: false,
        'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
        allowSleep: true,
        angularDamping: 1,
        linearDamping: 5,
        rotationSpeed: 2,
        type: 'dynamic',
        height: 40,
        width: 40,
        collidesWith: {
          units: true,
          items: true,
          projectiles: true,
          walls: true,
          unit: true,
          item: true,
          debris: true
        },
        'z-index': {
          layer: 3,
          depth: 3
        },
        name: 'Human-body'
      },
      spawnPosition: {
        y: 2200,
        x: 1500
      },
      attributes: {
        speed: {
          decimalPlaces: 0,
          dataType: '',
          name: 'speed',
          min: 0,
          max: 200,
          value: 8,
          regenerateSpeed: 0,
          isVisible: [],
          showAsHUD: true,
          color: '#00fff0',
          displayValue: true
        },
        health: {
          decimalPlaces: 0,
          color: '#ffff0f',
          showAsHUD: true,
          displayValue: true,
          isVisible: [
            'unitBarHostile',
            'unitBarNeutral',
            'unitBarFriendly',
            'centerBar'
          ],
          regenerateSpeed: '.1',
          value: 25,
          dataType: '',
          max: 25,
          min: 0,
          name: 'health '
        }
      },
      abilitiesJ8Gtv5hQ8j: {
        movementWheel: {
          mobilePosition: {
            y: 204,
            x: 35
          }
        },
        lookWheel: {
          mobilePosition: {
            y: 204,
            x: 407
          }
        },
        w: {
          keyUp: 'stopMovingUp',
          keyDown: 'moveUp'
        },
        a: {
          keyUp: 'stopMovingLeft',
          keyDown: 'moveLeft'
        },
        s: {
          keyUp: 'stopMovingDown',
          keyDown: 'moveDown'
        },
        d: {
          keyUp: 'stopMovingRight',
          keyDown: 'moveRight'
        },
        button1: {
          keyUp: 'stopUsingItem',
          keyDown: 'startUsingItem',
          mobilePosition: {
            x: 326,
            y: 132
          }
        },
        up: {
          keyUp: 'stopMovingUp',
          keyDown: 'moveUp'
        },
        down: {
          keyUp: 'stopMovingDown',
          keyDown: 'moveDown'
        },
        left: {
          keyUp: 'stopMovingLeft',
          keyDown: 'moveLeft'
        },
        right: {
          keyUp: 'stopMovingRight',
          keyDown: 'moveRight'
        },
        e: {
          keyUp: '',
          keyDown: 'pickUp',
          mobilePosition: {
            x: 366,
            y: 85
          }
        },
        f: {
          keyUp: '',
          keyDown: 'pickUp'
        },
        g: {
          keyUp: '',
          keyDown: 'drop',
          mobilePosition: {
            x: 365,
            y: 33
          }
        },
        b: {
          keyUp: '',
          keyDown: 'shop',
          mobilePosition: {
            x: 419,
            y: 32
          }
        }
      },
      baseSpeed: 53,
      price: {},
      skin: 'https://s3-us-west-1.amazonaws.com/modd/halloween-0.18/spritesheet/man.png',
      canBuyItem: true,
      handle: 'human',
      name: 'Pig',
      inventorySize: 1,
      cellSheet: {
        columnCount: 1,
        rowCount: 1,
        url: 'https://cache.modd.io/asset/spriteImage/1589646609302_pig.png'
      },
      bodies: {
        default: {
          bullet: false,
          name: 'default',
          type: 'dynamic',
          width: 60,
          height: 60,
          'z-index': {
            layer: 3,
            depth: 3
          },
          fixedRotation: false,
          'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
          allowSleep: true,
          collidesWith: {
            units: true,
            items: true,
            projectiles: true,
            walls: true,
            debris: true
          },
          angularDamping: 1,
          linearDamping: 8,
          rotationSpeed: 1,
          spriteScale: 1,
          fixtures: [
            {
              density: 1,
              friction: 0,
              restitution: 0,
              shape: {
                type: 'circle'
              },
              isSensor: false
            }
          ],
          jointType: 'weldJoint',
          unitAnchor: {
            x: 0,
            y: 33,
            rotation: 0
          },
          itemAnchor: {
            x: 0,
            y: 0,
            lowerAngle: 0,
            upperAngle: 0
          }
        }
      },
      variables: {},
      effects: {
        destroy: {
          animation: '',
          sound: {},
          projectileType: 'blood'
        },
        create: {
          animation: '',
          sound: {},
          projectileType: ''
        },
        move: {
          animation: '',
          sound: {},
          projectileType: ''
        },
        attacked: {
          tween: 'recoil',
          animation: '',
          sound: {},
          projectileType: ''
        },
        idle: {
          tween: '',
          animation: '',
          sound: {},
          projectileType: ''
        }
      },
      confinedWithinMapBoundaries: true,
      ai: {
        enabled: true,
        pathFindingMethod: 'simple',
        idleBehaviour: 'wander',
        sensorResponse: 'none',
        attackResponse: 'flee',
        maxTravelDistance: 300,
        sensorRadius: 150,
        maxAttackRange: 400
      },
      defaultItems: [],
      backpackSize: 0
    },
    survivor: {
      defaultItem: [
        {
          name: 'Crowbar',
          value: 'Crowbar',
          key: 'axe'
        }
      ],
      confinedWithinMapBoundaries: true,
      controls: {
        permittedInventorySlots: [],
        movementMethod: 'velocity',
        movementControlScheme: 'wasd',
        abilities: {
          movementWheel: {
            mobilePosition: {
              y: 204,
              x: 35
            }
          },
          lookWheel: {
            mobilePosition: {
              y: 204,
              x: 407
            }
          },
          b: {
            keyUp: {
              scriptName: '',
              cost: {}
            },
            keyDown: {
              scriptName: 'pgZxajB0mI',
              cost: {}
            }
          },
          button1: {
            keyUp: {
              cost: {},
              event: 'stopCasting',
              abilityId: 'ts7IOedYNc',
              isEntityScript: true
            },
            keyDown: {
              cost: {},
              event: 'startCasting',
              abilityId: 'ts7IOedYNc',
              isEntityScript: true
            }
          },
          e: {
            keyUp: {
              scriptName: '',
              cost: {}
            },
            keyDown: {
              scriptName: 'w2VrnZHyom',
              cost: {},
              isEntityScript: true
            }
          },
          g: {
            keyUp: {
              scriptName: '',
              cost: {}
            },
            keyDown: {
              scriptName: 'yP67J1MMRN',
              cost: {},
              isEntityScript: true
            }
          }
        },
        mouseBehaviour: {
          flipSpriteHorizontallyWRTMouse: false,
          rotateToFaceMouseCursor: true
        },
        movementType: 'wasd',
        absoluteRotation: false,
        unitAbilities: {
          ts7IOedYNc: {
            name: 'use item',
            eventScripts: {
              startCasting: 'YFeMQ20gBX',
              stopCasting: 'DOrbWp0AGz'
            },
            castDuration: null,
            cooldown: null,
            cost: {
              unitAttributes: {},
              playerAttributes: {}
            },
            streamMode: 2,
            visibility: 'mobile',
            iconUrl: ''
          }
        },
        clientPredictedMovement: true
      },
      inventoryImage: '',
      animations: {
        default: {
          framesPerSecond: 0,
          loopCount: 0,
          frames: [
            1
          ],
          name: 'default'
        }
      },
      canBePurchasedBy: [],
      isPurchasable: false,
      states: {
        default: {
          name: 'default',
          sound: {},
          particles: {},
          animation: 'default',
          body: 'default'
        }
      },
      sound: {
        KK9JlU1UQy: {
          name: 'Cough',
          file: 'https://modd.s3.amazonaws.com/asset/sound/1517554516253_man_cough.mp3'
        },
        fEhDyJ8knx: {
          name: 'Scream',
          file: 'https://modd.s3.amazonaws.com/asset/sound/1517556903046_man_scream1.mp3'
        }
      },
      particles: {},
      body: {
        spriteScale: 1,
        fixtures: [
          {
            shape: {
              type: 'rectangle'
            },
            restitution: 0.01,
            friction: 0.01,
            density: 3
          }
        ],
        isFlying: false,
        fixedRotation: false,
        'bulletDestroyedOnCollisionWithWall/unit': false,
        allowSleep: true,
        angularDamping: 1,
        linearDamping: 5,
        rotationSpeed: 2,
        type: 'dynamic',
        height: 40,
        width: 40,
        collidesWith: {
          units: true,
          items: true,
          projectiles: true,
          walls: true,
          unit: true,
          item: true,
          debris: true
        },
        'z-index': {
          layer: 3,
          depth: 3
        },
        name: 'Human-body'
      },
      spawnPosition: {
        y: 2200,
        x: 1500
      },
      attributes: {
        speed: {
          decimalPlaces: 0,
          dataType: '',
          name: 'speed',
          min: 0,
          max: 100,
          value: 10,
          regenerateSpeed: 0,
          isVisible: [],
          showAsHUD: true,
          color: '#00fff0',
          displayValue: true
        },
        health: {
          decimalPlaces: 0,
          color: '#ffff0f',
          showAsHUD: true,
          displayValue: true,
          isVisible: [
            'unitBarHostile',
            'unitBarNeutral',
            'unitBarFriendly',
            'centerBar'
          ],
          regenerateSpeed: '.1',
          value: 100,
          dataType: '',
          max: 100,
          min: 0,
          name: 'health '
        },
        Ar3OMCccmn: {
          name: 'Build cap',
          min: 0,
          max: 30,
          dataType: '',
          value: 0,
          regenerateSpeed: 0,
          isVisible: [],
          displayValue: false,
          showWhen: '',
          showAsHUD: true,
          color: 'white',
          decimalPlaces: 0,
          streamMode: 1
        }
      },
      abilities: {
        movementWheel: {
          mobilePosition: {
            y: 204,
            x: 35
          }
        },
        lookWheel: {
          mobilePosition: {
            y: 204,
            x: 407
          }
        },
        w: {
          keyUp: 'stopMovingUp',
          keyDown: 'moveUp'
        },
        a: {
          keyUp: 'stopMovingLeft',
          keyDown: 'moveLeft'
        },
        s: {
          keyUp: 'stopMovingDown',
          keyDown: 'moveDown'
        },
        d: {
          keyUp: 'stopMovingRight',
          keyDown: 'moveRight'
        },
        g: {
          keyUp: '',
          keyDown: 'drop'
        },
        e: {
          keyUp: '',
          keyDown: 'pickUp'
        },
        button1: {
          keyUp: 'stopUse',
          keyDown: 'use'
        }
      },
      baseSpeed: 53,
      price: {},
      skin: 'https://s3-us-west-1.amazonaws.com/modd/halloween-0.18/spritesheet/man.png',
      canBuyItem: true,
      handle: 'human',
      name: 'Survivor',
      inventorySize: 5,
      cellSheet: {
        url: 'https://cache.modd.io/asset/spriteImage/1589924067451_1588203181380_Man_Human_Person.png',
        rowCount: 1,
        columnCount: 1
      },
      bodies: {
        default: {
          bullet: false,
          name: 'default',
          type: 'dynamic',
          width: 54,
          height: 50,
          'z-index': {
            layer: 3,
            depth: 3
          },
          fixedRotation: false,
          'bulletDestroyedOnCollisionWithWall/unit': false,
          allowSleep: true,
          collidesWith: {
            units: true,
            items: true,
            projectiles: true,
            walls: true,
            debris: true
          },
          angularDamping: 1,
          linearDamping: 8,
          rotationSpeed: 1,
          spriteScale: 1,
          fixtures: [
            {
              density: 1,
              friction: 0,
              restitution: 0,
              shape: {
                type: 'rectangle'
              },
              isSensor: false
            }
          ],
          jointType: 'weldJoint',
          unitAnchor: {
            x: 0,
            y: 33,
            rotation: 0
          },
          itemAnchor: {
            x: 0,
            y: 0,
            lowerAngle: 0,
            upperAngle: 0
          }
        }
      },
      variables: {
        host: {
          default: 'nohost',
          dataType: 'string',
          streamMode: 1
        }
      },
      effects: {
        attacked: {
          sound: {},
          animation: '',
          tween: 'recoil'
        },
        create: {
          sound: {},
          animation: ''
        },
        destroy: {
          sound: {},
          animation: ''
        }
      },
      defaultItems: [
        {
          name: 'Axe',
          value: 'Axe',
          key: 'axe'
        },
        {
          key: 'cFmwF64UTq',
          value: 'Wooden Wall2',
          name: 'Wooden Wall2'
        }
      ],
      backpackSize: 12,
      scripts: {
        YFeMQ20gBX: {
          triggers: [],
          conditions: [
            {
              operator: '==',
              operandType: 'boolean'
            },
            true,
            true
          ],
          actions: [
            {
              type: 'startUsingItem',
              entity: {
                function: 'getItemCurrentlyHeldByUnit',
                entity: {
                  function: 'thisEntity',
                  vars: []
                },
                vars: []
              },
              hasFixedCSP: null,
              runMode: 2,
              vars: []
            },
            {
              type: 'sendChatMessage',
              message: {
                function: 'stringToNumber',
                value: {
                  function: 'calculate',
                  items: [
                    {
                      operator: '-'
                    },
                    {
                      function: 'getValueOfEntityVariable',
                      variable: {
                        function: 'getEntityVariable',
                        variable: {
                          text: 'host',
                          dataType: 'string',
                          entity: 'survivor',
                          key: 'host'
                        }
                      },
                      entity: {
                        function: 'getSelectedEntity'
                      }
                    },
                    100
                  ],
                  vars: []
                },
                vars: []
              },
              vars: [],
              disabled: true
            }
          ],
          name: 'start using item',
          parent: 'YnK58YN6ZD',
          key: 'YFeMQ20gBX',
          order: 0
        },
        YnK58YN6ZD: {
          key: 'YnK58YN6ZD',
          folderName: 'abilities',
          parent: null,
          order: -1
        },
        DOrbWp0AGz: {
          triggers: [],
          conditions: [
            {
              operator: '==',
              operandType: 'boolean'
            },
            true,
            true
          ],
          actions: [
            {
              type: 'stopUsingItem',
              entity: {
                function: 'getItemCurrentlyHeldByUnit',
                entity: {
                  function: 'thisEntity',
                  vars: []
                },
                vars: []
              },
              hasFixedCSP: null,
              runMode: 2,
              vars: []
            }
          ],
          name: 'stop using item',
          parent: 'YnK58YN6ZD',
          key: 'DOrbWp0AGz',
          order: 1
        },
        w2VrnZHyom: {
          triggers: [],
          conditions: [
            {
              operator: '==',
              operandType: 'boolean'
            },
            true,
            true
          ],
          actions: [
            {
              type: 'forAllEntities',
              entityGroup: {
                function: 'entitiesInRegion',
                region: {
                  function: 'entityBounds',
                  entity: {
                    function: 'thisEntity',
                    vars: [
                      {
                        id: 'selectedEntity',
                        source: 'forAllEntities'
                      },
                      {
                        id: 'getSelectedEntity',
                        source: 'forAllEntities'
                      }
                    ]
                  },
                  vars: [
                    {
                      id: 'selectedEntity',
                      source: 'forAllEntities'
                    },
                    {
                      id: 'getSelectedEntity',
                      source: 'forAllEntities'
                    }
                  ]
                },
                vars: [
                  {
                    id: 'selectedEntity',
                    source: 'forAllEntities'
                  },
                  {
                    id: 'getSelectedEntity',
                    source: 'forAllEntities'
                  }
                ]
              },
              actions: [
                {
                  type: 'condition',
                  conditions: [
                    {
                      operandType: 'string',
                      operator: '=='
                    },
                    {
                      function: 'getEntityType',
                      entity: {
                        function: 'getSelectedEntity',
                        vars: [
                          {
                            id: 'selectedEntity',
                            source: 'forAllEntities'
                          },
                          {
                            id: 'getSelectedEntity',
                            source: 'forAllEntities'
                          }
                        ]
                      },
                      vars: [
                        {
                          id: 'selectedEntity',
                          source: 'forAllEntities'
                        },
                        {
                          id: 'getSelectedEntity',
                          source: 'forAllEntities'
                        }
                      ]
                    },
                    'item'
                  ],
                  then: [
                    {
                      type: 'makeUnitPickupItem',
                      unit: {
                        function: 'thisEntity',
                        vars: [
                          {
                            id: 'selectedEntity',
                            source: 'forAllEntities'
                          },
                          {
                            id: 'getSelectedEntity',
                            source: 'forAllEntities'
                          }
                        ]
                      },
                      item: {
                        function: 'getSelectedEntity',
                        vars: [
                          {
                            id: 'selectedEntity',
                            source: 'forAllEntities'
                          },
                          {
                            id: 'getSelectedEntity',
                            source: 'forAllEntities'
                          }
                        ]
                      },
                      vars: [
                        {
                          id: 'selectedEntity',
                          source: 'forAllEntities'
                        },
                        {
                          id: 'getSelectedEntity',
                          source: 'forAllEntities'
                        }
                      ]
                    }
                  ],
                  else: [],
                  vars: [
                    {
                      id: 'selectedEntity',
                      source: 'forAllEntities'
                    },
                    {
                      id: 'getSelectedEntity',
                      source: 'forAllEntities'
                    }
                  ]
                }
              ],
              vars: [
                {
                  id: 'selectedEntity',
                  source: 'forAllEntities'
                },
                {
                  id: 'getSelectedEntity',
                  source: 'forAllEntities'
                }
              ]
            }
          ],
          name: 'pick up item',
          parent: 'YnK58YN6ZD',
          key: 'w2VrnZHyom',
          order: 2
        },
        yP67J1MMRN: {
          triggers: [],
          conditions: [
            {
              operator: '==',
              operandType: 'boolean'
            },
            true,
            true
          ],
          actions: [
            {
              type: 'dropItemAtPosition',
              item: {
                function: 'getItemCurrentlyHeldByUnit',
                entity: {
                  function: 'thisEntity',
                  vars: []
                },
                vars: []
              },
              position: {
                function: 'getEntityPosition',
                entity: {
                  function: 'thisEntity',
                  vars: []
                },
                vars: []
              },
              vars: []
            }
          ],
          name: 'drop item',
          parent: 'YnK58YN6ZD',
          key: 'yP67J1MMRN',
          order: 3
        }
      },
      isUnTargetable: false,
      ai: {
        pathFindingMethod: 'simple',
        idleBehaviour: 'stay',
        sensorResponse: 'none',
        attackResponse: 'none',
        maxTravelDistance: '',
        letGoDistance: '',
        sensorRadius: 150,
        maxAttackRange: 400,
        enabled: false
      },
      id: 'survivor',
      streamMode: 1
    },
    tree: {
      defaultItem: [],
      controls: {
        movementMethod: 'velocity',
        movementControlScheme: 'wasd',
        abilities: {
          movementWheel: {
            mobilePosition: {
              y: 204,
              x: 35
            }
          },
          lookWheel: {
            mobilePosition: {
              y: 204,
              x: 407
            }
          }
        },
        mouseBehaviour: {
          flipSpriteHorizontallyWRTMouse: false,
          rotateToFaceMouseCursor: true
        },
        movementType: 'wasd',
        permittedInventorySlots: []
      },
      inventoryImage: '',
      animations: {
        default: {
          name: 'default',
          frames: [
            1
          ],
          loopCount: 0,
          framesPerSecond: 0
        }
      },
      canBePurchasedBy: [],
      isPurchasable: false,
      states: {
        default: {
          name: 'default',
          sound: {},
          particles: {},
          animation: 'default',
          body: 'default'
        }
      },
      sound: {
        KK9JlU1UQy: {
          name: 'Cough',
          file: 'https://modd.s3.amazonaws.com/asset/sound/1517554516253_man_cough.mp3'
        },
        fEhDyJ8knx: {
          name: 'Scream',
          file: 'https://modd.s3.amazonaws.com/asset/sound/1517556903046_man_scream1.mp3'
        }
      },
      particles: {},
      body: {
        spriteScale: 1,
        fixtures: [
          {
            shape: {
              type: 'rectangle'
            },
            restitution: 0.01,
            friction: 0.01,
            density: 3
          }
        ],
        isFlying: false,
        fixedRotation: false,
        'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
        allowSleep: true,
        angularDamping: 1,
        linearDamping: 5,
        rotationSpeed: 2,
        type: 'dynamic',
        height: 40,
        width: 40,
        collidesWith: {
          units: true,
          items: true,
          projectiles: true,
          walls: true,
          unit: true,
          item: true,
          debris: true
        },
        'z-index': {
          layer: 3,
          depth: 3
        },
        name: 'Human-body'
      },
      spawnPosition: {
        y: 2200,
        x: 1500
      },
      attributes: {
        speed: {
          decimalPlaces: 0,
          dataType: '',
          name: 'speed',
          min: 0,
          max: 200,
          value: 10,
          regenerateSpeed: 0,
          isVisible: [],
          showAsHUD: true,
          color: '#00fff0',
          displayValue: true
        },
        health: {
          decimalPlaces: 0,
          color: '#ffff0f',
          showAsHUD: true,
          displayValue: true,
          isVisible: [],
          regenerateSpeed: 100,
          value: 10000,
          dataType: '',
          max: 10000,
          min: 0,
          name: 'health '
        }
      },
      abilitiesJ8Gtv5hQ8j: {
        movementWheel: {
          mobilePosition: {
            y: 204,
            x: 35
          }
        },
        lookWheel: {
          mobilePosition: {
            y: 204,
            x: 407
          }
        },
        w: {
          keyUp: 'stopMovingUp',
          keyDown: 'moveUp'
        },
        a: {
          keyUp: 'stopMovingLeft',
          keyDown: 'moveLeft'
        },
        s: {
          keyUp: 'stopMovingDown',
          keyDown: 'moveDown'
        },
        d: {
          keyUp: 'stopMovingRight',
          keyDown: 'moveRight'
        },
        button1: {
          keyUp: 'stopUsingItem',
          keyDown: 'startUsingItem',
          mobilePosition: {
            x: 326,
            y: 132
          }
        },
        up: {
          keyUp: 'stopMovingUp',
          keyDown: 'moveUp'
        },
        down: {
          keyUp: 'stopMovingDown',
          keyDown: 'moveDown'
        },
        left: {
          keyUp: 'stopMovingLeft',
          keyDown: 'moveLeft'
        },
        right: {
          keyUp: 'stopMovingRight',
          keyDown: 'moveRight'
        },
        e: {
          keyUp: '',
          keyDown: 'pickUp',
          mobilePosition: {
            x: 366,
            y: 85
          }
        },
        f: {
          keyUp: '',
          keyDown: 'pickUp'
        },
        g: {
          keyUp: '',
          keyDown: 'drop',
          mobilePosition: {
            x: 365,
            y: 33
          }
        },
        b: {
          keyUp: '',
          keyDown: 'shop',
          mobilePosition: {
            x: 419,
            y: 32
          }
        }
      },
      baseSpeed: 53,
      price: {},
      skin: 'https://s3-us-west-1.amazonaws.com/modd/halloween-0.18/spritesheet/man.png',
      canBuyItem: true,
      handle: 'human',
      name: 'Tree',
      inventorySize: 0,
      cellSheet: {
        url: 'https://cache.modd.io/asset/spriteImage/1589643910648_tree.png',
        rowCount: 1,
        columnCount: 1
      },
      bodies: {
        default: {
          bullet: false,
          name: 'default',
          type: 'static',
          width: 104,
          height: 104,
          'z-index': {
            layer: 5,
            depth: 3
          },
          fixedRotation: true,
          'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
          allowSleep: true,
          collidesWith: {
            units: true,
            items: true,
            projectiles: true,
            walls: true,
            debris: true
          },
          angularDamping: 1,
          linearDamping: 8,
          rotationSpeed: 1,
          spriteScale: 1,
          fixtures: [
            {
              density: 1,
              friction: 0,
              restitution: 0,
              shape: {
                type: 'circle'
              },
              isSensor: true
            }
          ],
          jointType: 'weldJoint',
          unitAnchor: {
            x: 0,
            y: 33,
            rotation: 0
          },
          itemAnchor: {
            x: 0,
            y: 0,
            lowerAngle: 0,
            upperAngle: 0
          }
        }
      },
      variables: {},
      effects: {
        destroy: {
          animation: '',
          sound: {},
          projectileType: ''
        },
        create: {
          animation: '',
          sound: {},
          projectileType: ''
        },
        move: {
          animation: '',
          sound: {},
          projectileType: ''
        },
        attacked: {
          tween: 'recoil',
          animation: '',
          sound: {},
          projectileType: ''
        },
        idle: {
          tween: '',
          animation: '',
          sound: {},
          projectileType: ''
        }
      },
      confinedWithinMapBoundaries: true,
      ai: {
        pathFindingMethod: 'simple',
        idleBehaviour: 'stay',
        sensorResponse: 'none',
        attackResponse: 'none',
        maxTravelDistance: 300
      },
      backpackSize: 0,
      defaultItems: []
    },
    rock: {
      ai: {
        maxTravelDistance: 300,
        attackResponse: 'none',
        sensorResponse: 'none',
        idleBehaviour: 'stay',
        pathFindingMethod: 'simple'
      },
      confinedWithinMapBoundaries: true,
      effects: {
        idle: {
          projectileType: '',
          sound: {},
          animation: '',
          tween: ''
        },
        attacked: {
          projectileType: '',
          sound: {},
          animation: '',
          tween: 'recoil'
        },
        move: {
          projectileType: '',
          sound: {},
          animation: ''
        },
        create: {
          projectileType: '',
          sound: {},
          animation: ''
        },
        destroy: {
          projectileType: '',
          sound: {},
          animation: ''
        }
      },
      variables: {},
      bodies: {
        default: {
          itemAnchor: {
            upperAngle: 0,
            lowerAngle: 0,
            y: 0,
            x: 0
          },
          unitAnchor: {
            rotation: 0,
            y: 33,
            x: 0
          },
          jointType: 'weldJoint',
          fixtures: [
            {
              isSensor: false,
              shape: {
                type: 'circle'
              },
              restitution: 0,
              friction: 0,
              density: 1
            }
          ],
          spriteScale: 1,
          rotationSpeed: 1,
          linearDamping: 8,
          angularDamping: 1,
          collidesWith: {
            debris: true,
            walls: true,
            projectiles: true,
            items: true,
            units: true
          },
          allowSleep: true,
          'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
          fixedRotation: true,
          'z-index': {
            depth: 3,
            layer: 3
          },
          height: 64,
          width: 64,
          type: 'static',
          name: 'default',
          bullet: false
        }
      },
      cellSheet: {
        columnCount: 1,
        rowCount: 1,
        url: 'https://cache.modd.io/asset/spriteImage/1589568802553_Stone_Rocks.png'
      },
      inventorySize: 0,
      name: 'Rock',
      handle: 'human',
      canBuyItem: true,
      skin: 'https://s3-us-west-1.amazonaws.com/modd/halloween-0.18/spritesheet/man.png',
      price: {},
      baseSpeed: 53,
      abilitiesJ8Gtv5hQ8j: {
        b: {
          mobilePosition: {
            y: 32,
            x: 419
          },
          keyDown: 'shop',
          keyUp: ''
        },
        g: {
          mobilePosition: {
            y: 33,
            x: 365
          },
          keyDown: 'drop',
          keyUp: ''
        },
        f: {
          keyDown: 'pickUp',
          keyUp: ''
        },
        e: {
          mobilePosition: {
            y: 85,
            x: 366
          },
          keyDown: 'pickUp',
          keyUp: ''
        },
        right: {
          keyDown: 'moveRight',
          keyUp: 'stopMovingRight'
        },
        left: {
          keyDown: 'moveLeft',
          keyUp: 'stopMovingLeft'
        },
        down: {
          keyDown: 'moveDown',
          keyUp: 'stopMovingDown'
        },
        up: {
          keyDown: 'moveUp',
          keyUp: 'stopMovingUp'
        },
        button1: {
          mobilePosition: {
            y: 132,
            x: 326
          },
          keyDown: 'startUsingItem',
          keyUp: 'stopUsingItem'
        },
        d: {
          keyDown: 'moveRight',
          keyUp: 'stopMovingRight'
        },
        s: {
          keyDown: 'moveDown',
          keyUp: 'stopMovingDown'
        },
        a: {
          keyDown: 'moveLeft',
          keyUp: 'stopMovingLeft'
        },
        w: {
          keyDown: 'moveUp',
          keyUp: 'stopMovingUp'
        },
        lookWheel: {
          mobilePosition: {
            x: 407,
            y: 204
          }
        },
        movementWheel: {
          mobilePosition: {
            x: 35,
            y: 204
          }
        }
      },
      attributes: {
        health: {
          name: 'health ',
          min: 0,
          max: 10000,
          dataType: '',
          value: 10000,
          regenerateSpeed: 100,
          isVisible: [],
          displayValue: true,
          showAsHUD: true,
          color: '#ffff0f',
          decimalPlaces: 0
        },
        speed: {
          displayValue: true,
          color: '#00fff0',
          showAsHUD: true,
          isVisible: [],
          regenerateSpeed: 0,
          value: 10,
          max: 200,
          min: 0,
          name: 'speed',
          dataType: '',
          decimalPlaces: 0
        }
      },
      spawnPosition: {
        x: 1500,
        y: 2200
      },
      body: {
        name: 'Human-body',
        'z-index': {
          depth: 3,
          layer: 3
        },
        collidesWith: {
          debris: true,
          item: true,
          unit: true,
          walls: true,
          projectiles: true,
          items: true,
          units: true
        },
        width: 40,
        height: 40,
        type: 'dynamic',
        rotationSpeed: 2,
        linearDamping: 5,
        angularDamping: 1,
        allowSleep: true,
        'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
        fixedRotation: false,
        isFlying: false,
        fixtures: [
          {
            density: 3,
            friction: 0.01,
            restitution: 0.01,
            shape: {
              type: 'rectangle'
            }
          }
        ],
        spriteScale: 1
      },
      particles: {},
      sound: {
        fEhDyJ8knx: {
          file: 'https://modd.s3.amazonaws.com/asset/sound/1517556903046_man_scream1.mp3',
          name: 'Scream'
        },
        KK9JlU1UQy: {
          file: 'https://modd.s3.amazonaws.com/asset/sound/1517554516253_man_cough.mp3',
          name: 'Cough'
        }
      },
      states: {
        default: {
          body: 'default',
          animation: 'default',
          particles: {},
          sound: {},
          name: 'default'
        }
      },
      isPurchasable: false,
      canBePurchasedBy: [],
      animations: {
        default: {
          framesPerSecond: 0,
          loopCount: 0,
          frames: [
            1
          ],
          name: 'default'
        }
      },
      inventoryImage: '',
      controls: {
        movementType: 'wasd',
        mouseBehaviour: {
          rotateToFaceMouseCursor: true,
          flipSpriteHorizontallyWRTMouse: false
        },
        abilities: {
          lookWheel: {
            mobilePosition: {
              x: 407,
              y: 204
            }
          },
          movementWheel: {
            mobilePosition: {
              x: 35,
              y: 204
            }
          }
        },
        movementControlScheme: 'wasd',
        movementMethod: 'velocity',
        permittedInventorySlots: []
      },
      defaultItem: [],
      backpackSize: 0,
      defaultItems: []
    },
    T0IUZvxPfi: {
      defaultItems: [],
      ai: {
        maxAttackRange: 400,
        sensorRadius: 150,
        maxTravelDistance: 300,
        attackResponse: 'none',
        sensorResponse: 'none',
        idleBehaviour: 'stay',
        pathFindingMethod: 'simple',
        enabled: false
      },
      confinedWithinMapBoundaries: true,
      effects: {
        destroy: {
          animation: '',
          sound: {},
          projectileType: ''
        },
        create: {
          animation: '',
          sound: {},
          projectileType: ''
        },
        move: {
          animation: '',
          sound: {},
          projectileType: ''
        },
        attacked: {
          tween: 'recoil',
          animation: '',
          sound: {},
          projectileType: ''
        },
        idle: {
          tween: '',
          animation: '',
          sound: {},
          projectileType: ''
        }
      },
      variables: {},
      bodies: {
        default: {
          itemAnchor: {
            upperAngle: 0,
            lowerAngle: 0,
            y: 0,
            x: 0
          },
          unitAnchor: {
            rotation: 0,
            y: 33,
            x: 0
          },
          jointType: 'weldJoint',
          fixtures: [
            {
              isSensor: false,
              shape: {
                type: 'circle'
              },
              restitution: 0,
              friction: 0,
              density: 1
            }
          ],
          spriteScale: 1,
          rotationSpeed: 1,
          linearDamping: 8,
          angularDamping: 1,
          collidesWith: {
            debris: true,
            walls: true,
            projectiles: true,
            items: true,
            units: true
          },
          allowSleep: true,
          'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
          fixedRotation: false,
          'z-index': {
            depth: 3,
            layer: 3
          },
          height: 64,
          width: 64,
          type: 'static',
          name: 'default',
          bullet: false
        }
      },
      cellSheet: {
        url: 'https://cache.modd.io/asset/spriteImage/1589815385746_1588262615812_Tree_Trunk_Log_Wood_Circle.png',
        rowCount: 1,
        columnCount: 1
      },
      inventorySize: 0,
      name: 'Wooden Wall',
      handle: 'human',
      canBuyItem: true,
      skin: 'https://s3-us-west-1.amazonaws.com/modd/halloween-0.18/spritesheet/man.png',
      price: {},
      baseSpeed: 53,
      abilitiesJ8Gtv5HQ8JREnjD: {
        b: {
          mobilePosition: {
            y: 32,
            x: 419
          },
          keyDown: 'shop',
          keyUp: ''
        },
        g: {
          mobilePosition: {
            y: 33,
            x: 365
          },
          keyDown: 'drop',
          keyUp: ''
        },
        f: {
          keyDown: 'pickUp',
          keyUp: ''
        },
        e: {
          mobilePosition: {
            y: 85,
            x: 366
          },
          keyDown: 'pickUp',
          keyUp: ''
        },
        right: {
          keyDown: 'moveRight',
          keyUp: 'stopMovingRight'
        },
        left: {
          keyDown: 'moveLeft',
          keyUp: 'stopMovingLeft'
        },
        down: {
          keyDown: 'moveDown',
          keyUp: 'stopMovingDown'
        },
        up: {
          keyDown: 'moveUp',
          keyUp: 'stopMovingUp'
        },
        button1: {
          mobilePosition: {
            y: 132,
            x: 326
          },
          keyDown: 'startUsingItem',
          keyUp: 'stopUsingItem'
        },
        d: {
          keyDown: 'moveRight',
          keyUp: 'stopMovingRight'
        },
        s: {
          keyDown: 'moveDown',
          keyUp: 'stopMovingDown'
        },
        a: {
          keyDown: 'moveLeft',
          keyUp: 'stopMovingLeft'
        },
        w: {
          keyDown: 'moveUp',
          keyUp: 'stopMovingUp'
        },
        lookWheel: {
          mobilePosition: {
            x: 407,
            y: 204
          }
        },
        movementWheel: {
          mobilePosition: {
            x: 35,
            y: 204
          }
        }
      },
      attributes: {
        health: {
          name: 'health ',
          min: 0,
          max: 500,
          dataType: '',
          value: 500,
          regenerateSpeed: 0,
          isVisible: [
            'unitBarFriendly',
            'unitBarNeutral',
            'unitBarHostile',
            'centerBar'
          ],
          displayValue: true,
          showAsHUD: true,
          color: '#fff308',
          decimalPlaces: 0
        },
        speed: {
          displayValue: true,
          color: '#c3efe3',
          showAsHUD: true,
          isVisible: [],
          regenerateSpeed: 0,
          value: 10,
          max: 200,
          min: 0,
          name: 'speed',
          dataType: '',
          decimalPlaces: 0
        }
      },
      spawnPosition: {
        x: 1500,
        y: 2200
      },
      body: {
        name: 'Human-body',
        'z-index': {
          depth: 3,
          layer: 3
        },
        collidesWith: {
          debris: true,
          item: true,
          unit: true,
          walls: true,
          projectiles: true,
          items: true,
          units: true
        },
        width: 40,
        height: 40,
        type: 'dynamic',
        rotationSpeed: 2,
        linearDamping: 5,
        angularDamping: 1,
        allowSleep: true,
        'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
        fixedRotation: false,
        isFlying: false,
        fixtures: [
          {
            density: 3,
            friction: 0.01,
            restitution: 0.01,
            shape: {
              type: 'rectangle'
            }
          }
        ],
        spriteScale: 1
      },
      particles: {},
      sound: {
        fEhDyJ8knx: {
          file: 'https://modd.s3.amazonaws.com/asset/sound/1517556903046_man_scream1.mp3',
          name: 'Scream'
        },
        KK9JlU1UQy: {
          file: 'https://modd.s3.amazonaws.com/asset/sound/1517554516253_man_cough.mp3',
          name: 'Cough'
        }
      },
      states: {
        default: {
          body: 'default',
          animation: 'default',
          particles: {},
          sound: {},
          name: 'default'
        }
      },
      isPurchasable: false,
      canBePurchasedBy: [],
      animations: {
        default: {
          name: 'default',
          frames: [
            2,
            3,
            4,
            3
          ],
          loopCount: null,
          framesPerSecond: 8
        }
      },
      inventoryImage: null,
      controls: {
        movementType: 'wasd',
        mouseBehaviour: {
          rotateToFaceMouseCursor: false,
          flipSpriteHorizontallyWRTMouse: false
        },
        abilities: {
          lookWheel: {
            mobilePosition: {
              x: 407,
              y: 204
            }
          },
          movementWheel: {
            mobilePosition: {
              x: 35,
              y: 204
            }
          }
        },
        movementControlScheme: 'wasd',
        movementMethod: 'force',
        permittedInventorySlots: []
      },
      defaultItem: [],
      backpackSize: 0
    },
    bLUZrdA3Gd: {
      defaultItems: [],
      ai: {
        maxAttackRange: 400,
        sensorRadius: 150,
        maxTravelDistance: 300,
        attackResponse: 'none',
        sensorResponse: 'none',
        idleBehaviour: 'stay',
        pathFindingMethod: 'simple',
        enabled: false
      },
      confinedWithinMapBoundaries: true,
      effects: {
        destroy: {
          animation: '',
          sound: {},
          projectileType: ''
        },
        create: {
          animation: '',
          sound: {},
          projectileType: ''
        },
        move: {
          animation: '',
          sound: {},
          projectileType: ''
        },
        attacked: {
          tween: 'recoil',
          animation: '',
          sound: {},
          projectileType: ''
        },
        idle: {
          tween: '',
          animation: '',
          sound: {},
          projectileType: ''
        }
      },
      variables: {},
      bodies: {
        default: {
          itemAnchor: {
            upperAngle: 0,
            lowerAngle: 0,
            y: 0,
            x: 0
          },
          unitAnchor: {
            rotation: 0,
            y: 33,
            x: 0
          },
          jointType: 'weldJoint',
          fixtures: [
            {
              isSensor: false,
              shape: {
                type: 'circle'
              },
              restitution: 0,
              friction: 0,
              density: 1
            }
          ],
          spriteScale: 1,
          rotationSpeed: 1,
          linearDamping: 8,
          angularDamping: 1,
          collidesWith: {
            debris: true,
            walls: true,
            projectiles: true,
            items: true,
            units: true
          },
          allowSleep: true,
          'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
          fixedRotation: false,
          'z-index': {
            depth: 3,
            layer: 3
          },
          height: 64,
          width: 64,
          type: 'static',
          name: 'default',
          bullet: false
        }
      },
      cellSheet: {
        url: 'https://cache.modd.io/asset/spriteImage/1589816787776_1588262552245_Stone_Rock_Circle_Wall.png',
        rowCount: 1,
        columnCount: 1
      },
      inventorySize: 0,
      name: 'Stone Wall',
      handle: 'human',
      canBuyItem: true,
      skin: 'https://s3-us-west-1.amazonaws.com/modd/halloween-0.18/spritesheet/man.png',
      price: {},
      baseSpeed: 53,
      abilitiesJ8Gtv5HQ8JREnjD: {
        b: {
          mobilePosition: {
            y: 32,
            x: 419
          },
          keyDown: 'shop',
          keyUp: ''
        },
        g: {
          mobilePosition: {
            y: 33,
            x: 365
          },
          keyDown: 'drop',
          keyUp: ''
        },
        f: {
          keyDown: 'pickUp',
          keyUp: ''
        },
        e: {
          mobilePosition: {
            y: 85,
            x: 366
          },
          keyDown: 'pickUp',
          keyUp: ''
        },
        right: {
          keyDown: 'moveRight',
          keyUp: 'stopMovingRight'
        },
        left: {
          keyDown: 'moveLeft',
          keyUp: 'stopMovingLeft'
        },
        down: {
          keyDown: 'moveDown',
          keyUp: 'stopMovingDown'
        },
        up: {
          keyDown: 'moveUp',
          keyUp: 'stopMovingUp'
        },
        button1: {
          mobilePosition: {
            y: 132,
            x: 326
          },
          keyDown: 'startUsingItem',
          keyUp: 'stopUsingItem'
        },
        d: {
          keyDown: 'moveRight',
          keyUp: 'stopMovingRight'
        },
        s: {
          keyDown: 'moveDown',
          keyUp: 'stopMovingDown'
        },
        a: {
          keyDown: 'moveLeft',
          keyUp: 'stopMovingLeft'
        },
        w: {
          keyDown: 'moveUp',
          keyUp: 'stopMovingUp'
        },
        lookWheel: {
          mobilePosition: {
            x: 407,
            y: 204
          }
        },
        movementWheel: {
          mobilePosition: {
            x: 35,
            y: 204
          }
        }
      },
      attributes: {
        health: {
          name: 'health ',
          min: 0,
          max: 1000,
          dataType: '',
          value: 1000,
          regenerateSpeed: 0,
          isVisible: [
            'unitBarFriendly',
            'unitBarNeutral',
            'unitBarHostile',
            'centerBar'
          ],
          displayValue: true,
          showAsHUD: true,
          color: '#fff308',
          decimalPlaces: 0
        },
        speed: {
          displayValue: true,
          color: '#c3efe3',
          showAsHUD: true,
          isVisible: [],
          regenerateSpeed: 0,
          value: 10,
          max: 200,
          min: 0,
          name: 'speed',
          dataType: '',
          decimalPlaces: 0
        }
      },
      spawnPosition: {
        x: 1500,
        y: 2200
      },
      body: {
        name: 'Human-body',
        'z-index': {
          depth: 3,
          layer: 3
        },
        collidesWith: {
          debris: true,
          item: true,
          unit: true,
          walls: true,
          projectiles: true,
          items: true,
          units: true
        },
        width: 40,
        height: 40,
        type: 'dynamic',
        rotationSpeed: 2,
        linearDamping: 5,
        angularDamping: 1,
        allowSleep: true,
        'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
        fixedRotation: false,
        isFlying: false,
        fixtures: [
          {
            density: 3,
            friction: 0.01,
            restitution: 0.01,
            shape: {
              type: 'rectangle'
            }
          }
        ],
        spriteScale: 1
      },
      particles: {},
      sound: {
        fEhDyJ8knx: {
          file: 'https://modd.s3.amazonaws.com/asset/sound/1517556903046_man_scream1.mp3',
          name: 'Scream'
        },
        KK9JlU1UQy: {
          file: 'https://modd.s3.amazonaws.com/asset/sound/1517554516253_man_cough.mp3',
          name: 'Cough'
        }
      },
      states: {
        default: {
          body: 'default',
          animation: 'default',
          particles: {},
          sound: {},
          name: 'default'
        }
      },
      isPurchasable: false,
      canBePurchasedBy: [],
      animations: {
        default: {
          name: 'default',
          frames: [
            2,
            3,
            4,
            3
          ],
          loopCount: null,
          framesPerSecond: 8
        }
      },
      inventoryImage: null,
      controls: {
        movementType: 'wasd',
        mouseBehaviour: {
          rotateToFaceMouseCursor: false,
          flipSpriteHorizontallyWRTMouse: false
        },
        abilities: {
          lookWheel: {
            mobilePosition: {
              x: 407,
              y: 204
            }
          },
          movementWheel: {
            mobilePosition: {
              x: 35,
              y: 204
            }
          }
        },
        movementControlScheme: 'wasd',
        movementMethod: 'force',
        permittedInventorySlots: []
      },
      defaultItem: [],
      backpackSize: 0
    },
    RRl7Rgq0i1: {
      defaultItems: [],
      ai: {
        maxAttackRange: 400,
        sensorRadius: 150,
        maxTravelDistance: 300,
        attackResponse: 'none',
        sensorResponse: 'none',
        idleBehaviour: 'stay',
        pathFindingMethod: 'simple',
        enabled: false,
        letGoDistance: ''
      },
      confinedWithinMapBoundaries: true,
      effects: {
        idle: {
          projectileType: '',
          sound: {},
          animation: '',
          tween: '',
          runScript: ''
        },
        attacked: {
          projectileType: '',
          sound: {},
          animation: '',
          tween: 'recoil',
          runScript: ''
        },
        move: {
          projectileType: '',
          sound: {},
          animation: '',
          tween: '',
          runScript: ''
        },
        create: {
          projectileType: '',
          sound: {},
          animation: '',
          runScript: ''
        },
        destroy: {
          projectileType: '',
          sound: {},
          animation: '',
          runScript: ''
        }
      },
      variables: {
        host: {
          default: 'nohost',
          dataType: 'string',
          streamMode: 1
        }
      },
      bodies: {
        default: {
          itemAnchor: {
            upperAngle: 0,
            lowerAngle: 0,
            y: 0,
            x: 0
          },
          unitAnchor: {
            rotation: 0,
            y: 33,
            x: 0
          },
          jointType: 'weldJoint',
          fixtures: [
            {
              isSensor: false,
              shape: {
                type: 'rectangle'
              },
              restitution: 0,
              friction: 0,
              density: 99999999,
              offset: {
                x: 0,
                y: 0
              },
              size: {}
            }
          ],
          spriteScale: 1,
          rotationSpeed: 1,
          linearDamping: 8,
          angularDamping: 1,
          collidesWith: {
            debris: true,
            walls: true,
            projectiles: true,
            items: true,
            units: true
          },
          allowSleep: true,
          'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
          fixedRotation: true,
          'z-index': {
            depth: 3,
            layer: 3
          },
          height: 128,
          width: 128,
          type: 'static',
          name: 'default',
          bullet: false,
          affectedByGravity: false
        }
      },
      cellSheet: {
        url: 'https://cache.modd.io/asset/spriteImage/1704855713897_wooden_wall.png',
        rowCount: 1,
        columnCount: 1
      },
      inventorySize: 0,
      name: 'Wooden Wall2',
      handle: 'human',
      canBuyItem: true,
      skin: 'https://s3-us-west-1.amazonaws.com/modd/halloween-0.18/spritesheet/man.png',
      price: {},
      baseSpeed: 53,
      abilitiesJ8Gtv5HQ8JREnjD: {
        b: {
          mobilePosition: {
            y: 32,
            x: 419
          },
          keyDown: 'shop',
          keyUp: ''
        },
        g: {
          mobilePosition: {
            y: 33,
            x: 365
          },
          keyDown: 'drop',
          keyUp: ''
        },
        f: {
          keyDown: 'pickUp',
          keyUp: ''
        },
        e: {
          mobilePosition: {
            y: 85,
            x: 366
          },
          keyDown: 'pickUp',
          keyUp: ''
        },
        right: {
          keyDown: 'moveRight',
          keyUp: 'stopMovingRight'
        },
        left: {
          keyDown: 'moveLeft',
          keyUp: 'stopMovingLeft'
        },
        down: {
          keyDown: 'moveDown',
          keyUp: 'stopMovingDown'
        },
        up: {
          keyDown: 'moveUp',
          keyUp: 'stopMovingUp'
        },
        button1: {
          mobilePosition: {
            y: 132,
            x: 326
          },
          keyDown: 'startUsingItem',
          keyUp: 'stopUsingItem'
        },
        d: {
          keyDown: 'moveRight',
          keyUp: 'stopMovingRight'
        },
        s: {
          keyDown: 'moveDown',
          keyUp: 'stopMovingDown'
        },
        a: {
          keyDown: 'moveLeft',
          keyUp: 'stopMovingLeft'
        },
        w: {
          keyDown: 'moveUp',
          keyUp: 'stopMovingUp'
        },
        lookWheel: {
          mobilePosition: {
            x: 407,
            y: 204
          }
        },
        movementWheel: {
          mobilePosition: {
            x: 35,
            y: 204
          }
        }
      },
      attributes: {
        health: {
          name: 'health ',
          min: 0,
          max: 500,
          dataType: '',
          value: 500,
          regenerateSpeed: 0,
          isVisible: [
            'unitBarFriendly',
            'unitBarNeutral',
            'unitBarHostile',
            'centerBar'
          ],
          displayValue: true,
          showAsHUD: true,
          color: '#fff308',
          decimalPlaces: 0,
          showWhen: 'valueChanges'
        },
        speed: {
          displayValue: true,
          color: '#c3efe3',
          showAsHUD: true,
          isVisible: [],
          regenerateSpeed: 0,
          value: 10,
          max: 200,
          min: 0,
          name: 'speed',
          dataType: '',
          decimalPlaces: 0
        }
      },
      spawnPosition: {
        x: 1500,
        y: 2200
      },
      body: {
        name: 'Human-body',
        'z-index': {
          depth: 3,
          layer: 3
        },
        collidesWith: {
          debris: true,
          item: true,
          unit: true,
          walls: true,
          projectiles: true,
          items: true,
          units: true
        },
        width: 40,
        height: 40,
        type: 'dynamic',
        rotationSpeed: 2,
        linearDamping: 5,
        angularDamping: 1,
        allowSleep: true,
        'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
        fixedRotation: false,
        isFlying: false,
        fixtures: [
          {
            density: 3,
            friction: 0.01,
            restitution: 0.01,
            shape: {
              type: 'rectangle'
            }
          }
        ],
        spriteScale: 1
      },
      particles: {},
      sound: {
        fEhDyJ8knx: {
          file: 'https://modd.s3.amazonaws.com/asset/sound/1517556903046_man_scream1.mp3',
          name: 'Scream'
        },
        KK9JlU1UQy: {
          file: 'https://modd.s3.amazonaws.com/asset/sound/1517554516253_man_cough.mp3',
          name: 'Cough'
        }
      },
      states: {
        default: {
          body: 'default',
          animation: 'default',
          particles: {},
          sound: {},
          name: 'default'
        }
      },
      isPurchasable: false,
      canBePurchasedBy: [],
      animations: {
        default: {
          name: 'default',
          frames: [
            2,
            3,
            4,
            3
          ],
          loopCount: null,
          framesPerSecond: 8
        }
      },
      inventoryImage: 'https://cache.modd.io/asset/spriteImage/1704855713897_wooden_wall.png',
      controls: {
        movementType: 'wasd',
        mouseBehaviour: {
          rotateToFaceMouseCursor: false,
          flipSpriteHorizontallyWRTMouse: false
        },
        abilities: {
          lookWheel: {
            mobilePosition: {
              x: 407,
              y: 204
            }
          },
          movementWheel: {
            mobilePosition: {
              x: 35,
              y: 204
            }
          }
        },
        movementControlScheme: 'wasd',
        movementMethod: 'force',
        permittedInventorySlots: [],
        absoluteRotation: false,
        unitAbilities: {},
        clientPredictedMovement: true
      },
      defaultItem: [],
      backpackSize: 0,
      scripts: {
        APS6WbbkaC: {
          order: 2,
          key: 'APS6WbbkaC',
          parent: null,
          name: 'unit_death_2',
          actions: [
            {
              type: 'condition',
              conditions: [
                {
                  operandType: 'attributeType',
                  operator: '=='
                },
                {
                  function: 'getAttributeTypeOfAttribute',
                  entity: {
                    function: 'getTriggeringAttribute'
                  }
                },
                'health'
              ],
              then: [
                {
                  type: 'repeat',
                  count: {
                    function: 'getRandomNumberBetween',
                    min: 3,
                    max: 9
                  },
                  actions: [
                    {
                      type: 'applyForceOnEntityXY',
                      force: {
                        x: {
                          function: 'getRandomNumberBetween',
                          min: -150,
                          max: 150
                        },
                        y: {
                          function: 'getRandomNumberBetween',
                          min: -150,
                          max: 150
                        }
                      },
                      entity: {
                        function: 'getLastCreatedItem'
                      }
                    },
                    {
                      type: 'spawnItem',
                      itemType: 'HBlfzHEdHP',
                      position: {
                        function: 'getEntityPosition',
                        entity: {
                          function: 'thisEntity'
                        }
                      }
                    }
                  ],
                  disabled: false
                },
                {
                  type: 'forAllPlayers',
                  playerGroup: {
                    function: 'allPlayers'
                  },
                  actions: [
                    {
                      type: 'condition',
                      conditions: [
                        {
                          operandType: 'boolean',
                          operator: '=='
                        },
                        {
                          function: 'subString',
                          sourceString: {
                            function: 'getValueOfEntityVariable',
                            variable: {
                              function: 'getEntityVariable',
                              variable: {
                                text: 'host',
                                dataType: 'string',
                                entity: 'bear',
                                key: 'host'
                              }
                            },
                            entity: {
                              function: 'thisEntity'
                            }
                          },
                          patternString: {
                            function: 'getPlayerName',
                            entity: {
                              function: 'selectedPlayer'
                            }
                          }
                        },
                        true
                      ],
                      then: [
                        {
                          type: 'setEntityAttribute',
                          attribute: 'Ar3OMCccmn',
                          entity: {
                            function: 'getPlayerSelectedUnit',
                            player: {
                              function: 'selectedPlayer'
                            }
                          },
                          value: {
                            function: 'calculate',
                            items: [
                              {
                                operator: '-'
                              },
                              {
                                function: 'getEntityAttribute',
                                attribute: 'Ar3OMCccmn',
                                entity: {
                                  function: 'getPlayerSelectedUnit',
                                  player: {
                                    function: 'selectedPlayer'
                                  }
                                }
                              },
                              1
                            ]
                          }
                        },
                        {
                          type: 'createFloatingText',
                          text: {
                            function: 'concat',
                            textA: 'Build Capacity: ',
                            textB: {
                              function: 'calculate',
                              items: [
                                {
                                  operator: '-'
                                },
                                {
                                  function: 'getEntityAttribute',
                                  attribute: 'Ar3OMCccmn',
                                  entity: {
                                    function: 'getOwnerOfItem',
                                    entity: {
                                      function: 'thisEntity'
                                    }
                                  }
                                },
                                1
                              ]
                            }
                          },
                          position: {
                            function: 'getEntityPosition',
                            entity: {
                              function: 'getOwnerOfItem',
                              entity: {
                                function: 'thisEntity'
                              }
                            }
                          },
                          color: 'white'
                        }
                      ],
                      else: []
                    }
                  ]
                },
                {
                  type: 'destroyEntity',
                  entity: {
                    function: 'thisEntity'
                  }
                }
              ],
              else: []
            }
          ],
          conditions: [
            {
              operandType: 'boolean',
              operator: '=='
            },
            true,
            true
          ],
          triggers: [
            {
              type: 'entityAttributeBecomesZero'
            }
          ]
        }
      },
      isUnTargetable: true,
      streamMode: 1
    }
  },
  abilities: {
    ts7IOedYNc: {
      name: 'use item',
      eventScripts: {
        startCasting: '',
        stopCasting: ''
      },
      castDuration: null,
      cooldown: null,
      cost: {
        unitAttributes: {},
        playerAttributes: {}
      },
      streamMode: 2,
      visibility: 'always',
      iconUrl: ''
    }
  },
  variables: {
    'AI hostile': {
      dataType: 'player',
      default: 'computer1'
    },
    'AI neutral': {
      dataType: 'player',
      default: 'computer2'
    },
    'AI resources': {
      dataType: 'player',
      default: 'computer3'
    }
  },
  attributeTypes: {
    speed: {
      displayValue: true,
      color: '#c3efe3',
      showAsHUD: true,
      isVisible: [],
      regenerateSpeed: 0,
      value: 10,
      max: 200,
      min: 0,
      name: 'speed',
      dataType: '',
      decimalPlaces: 0
    },
    health: {
      name: 'health ',
      min: 0,
      max: 1000,
      dataType: '',
      value: 1000,
      regenerateSpeed: 0,
      isVisible: [
        'unitBarFriendly',
        'unitBarNeutral',
        'unitBarHostile',
        'centerBar'
      ],
      displayValue: true,
      showAsHUD: true,
      color: '#fff308',
      decimalPlaces: 0
    },
    respawnTimer: {
      decimalPlaces: 0,
      color: 'white',
      showAsHUD: true,
      displayValue: false,
      isVisible: false,
      regenerateSpeed: 5,
      value: 100,
      dataType: '',
      max: 100,
      min: 0,
      name: 'respawnTimer'
    },
    wood: {
      decimalPlaces: 0,
      color: 'white',
      showAsHUD: true,
      displayValue: true,
      isVisible: true,
      regenerateSpeed: 0,
      value: 0,
      dataType: '',
      max: 9999999,
      min: 0,
      name: 'Wood'
    },
    stone: {
      decimalPlaces: 0,
      color: 'white',
      showAsHUD: true,
      displayValue: true,
      isVisible: true,
      regenerateSpeed: 0,
      value: 0,
      dataType: '',
      max: 999999999,
      min: 0,
      name: 'Stone'
    },
    qo4uN9R1Uj: {
      decimalPlaces: 0,
      color: 'white',
      showAsHUD: true,
      displayValue: false,
      isVisible: false,
      regenerateSpeed: 0,
      value: 0,
      dataType: '',
      max: 1000000,
      min: 0,
      name: 'Score'
    },
    Ar3OMCccmn: {
      name: 'Build cap',
      min: 0,
      max: 30,
      dataType: '',
      value: 0,
      regenerateSpeed: 0,
      isVisible: false,
      displayValue: false,
      showWhen: '',
      showAsHUD: true,
      color: 'white',
      decimalPlaces: 0,
      streamMode: 1
    }
  },
  settings: {
    inventory: {
      isEnabled: false
    },
    shop: {
      isEnabled: false
    },
    camera: {
      trackingDelay: 3,
      zoom: {
        default: 700,
        type: 'static'
      }
    },
    constants: {
      currency: 'Food'
    },
    images: {
      logo: 'https://cache.modd.io/asset/spriteImage/1593104040375_modd_logo.png',
      cover: 'https://cache.modd.io/1501275562940_two houses cover.png'
    },
    gravity: {
      x: 0,
      y: 0
    },
    scoreBoard: 'n5JEoENeGg',
    scoreAttributeId: 'qo4uN9R1Uj',
    allowDuplicateIPs: true,
    displayScoreboard: true,
    prettifyingScoreboard: true,
    menuHTML: "<div id='left-menu' class=\"flex-column hide-on-mobile p-3\" style=\"max-width: 320px\">\n\t<div id='user-div' class=\"flex-shrink-0 mb-3\" style=\"box-shadow: 0 0 15px rgba(0,0,0,.5);\">\n\t\t{{ loginForm }}\n\t</div>\n\n\t<div id='menu-div' class=\"flex-shrink-0 mb-3\" style=\"box-shadow: 0 0 15px rgba(0,0,0,.5);\">\n\t\t{{ sideMenu }}\n\t</div>\n\n\t{{#if isUserLoggedIn }}\n    {{ friendsPanel }}\n  {{/if}}\n</div>\n\n<div id='right-menu' class=\"d-flex justify-content-center align-items-center flex-grow-1\">\n\t<div class=\"w-100\">\n\t\t<h1 class=\"text-center game-title\">\n\t\t</h1>\n\t\t\n\t\t<div class=\"row flex-grow-0 menu-row margin-auto justify-content-center\">\n\t\t\t<!-- changed d-lg-block to d-sm-block because wanted to show it in mobile app -->\n\t\t\t<div id=\"menu-column-left-container\" class=\"d-none d-sm-block\" style=\"min-width: 235px;\">\n\t\t\t\t<div class=\"white-bg\" style=\"box-shadow: 0 0 15px rgba(0,0,0,.5);\">\n\t\t\t\t\t{{ coinShop }}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\n\t\t\t<div id=\"menu-column-main-container\" class=\"pl-3\" style=\"{{#if constants.guestMode }} margin:auto {{/if}};\">\n\t\t\t\t<div id=\"menu-column-main\">\n\t\t\t\t\t<div class=\"white-bg\" style=\"max-width: 480px\">\n\t\t\t\t\t\t{{ playForm }}\t\t\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\n\t\t\t<div class=\"pl-3\" id=\"menu-column-right-container\" style=\"{{#if constants.guestMode }} margin:auto {{/if}};\">\n\t\t\t\t<div id=\"menu-column-left\" class=\"d-none d-lg-block bg-white rounded p-3\" style=\"max-width: 235px; width: 235px;\">\n\t\t\t\t\t{{ skinShop }}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t\n\t\t</div>\n\t</div>\n</div>",
    menudiv: 'Simple Hunt and Gather Game. Players can move using WASD or Arrow keys and open shop by pressing B. To drop / pick up resources G / E.'
  },
  images: [
    {
      key: 'sound',
      url: 'https://modd.s3.amazonaws.com/sprites/1512752415166_fire_shotgun.mp3'
    },
    {
      key: 'sound',
      url: 'https://modd.s3.amazonaws.com/sprites/1512755562800_fire_empty.mp3'
    },
    {
      key: 'sound',
      url: 'https://modd.s3.amazonaws.com/sprites/1512755594697_fire_minigun.mp3'
    },
    {
      key: 'sound',
      url: 'https://modd.s3.amazonaws.com/sprites/1512755610131_fire_pistol.mp3'
    },
    {
      key: 'sound',
      url: 'https://modd.s3.amazonaws.com/sprites/1512755622475_fire_rifle.mp3'
    },
    {
      key: 'sound',
      url: 'https://modd.s3.amazonaws.com/sprites/1512755644317_man_cough.mp3'
    },
    {
      key: 'sound',
      url: 'https://modd.s3.amazonaws.com/sprites/1512755666761_man_scream1.mp3'
    },
    {
      key: 'sound',
      url: 'https://modd.s3.amazonaws.com/sprites/1512755675893_man_scream2.mp3'
    },
    {
      key: 'sound',
      url: 'https://modd.s3.amazonaws.com/sprites/1512756015200_reload.mp3'
    }
  ],
  tilesets: [
    {
      image: 'https://cache.modd.io/two_houses-0.18/tilesheet.png',
      name: 'tilesheet_complete'
    },
    {
      image: 'https://cache.modd.io/two_houses-0.18/2x1.png',
      name: '2x1'
    },
    {
      image: 'https://cache.modd.io/two_houses-0.18/2x3.png',
      name: '2x3'
    },
    {
      image: 'https://cache.modd.io/two_houses-0.18/3x1.png',
      name: '3x1'
    },
    {
      image: 'https://cache.modd.io/two_houses-0.18/3x4.png',
      name: '3x4'
    },
    {
      image: 'https://cache.modd.io/two_houses-0.18/spritesheet/shop.png',
      name: 'shop'
    }
  ],
  factions: {
    '6BTQoFGUFP': {
      name: 'asdf',
      relationships: {},
      attributes: {
        '4P4pWD5ExV': {
          name: 'Stamina',
          min: 0,
          max: '100',
          value: '100',
          regenerateSpeed: 0.3,
          isVisible: true,
          color: 'yellow',
          showAsHUD: true
        }
      }
    },
    PgVCU0WgYj: {
      name: 'fda',
      relationships: {}
    }
  },
  playerTypes: {
    aiHostile: {
      name: 'Hostile Creeps',
      attributes: {},
      color: 'white',
      relationships: {
        aiNeutral: 'hostile',
        humanPlayer: 'hostile'
      },
      showNameLabel: false
    },
    humanPlayer: {
      name: 'Human Player',
      attributes: {
        stone: {
          decimalPlaces: 0,
          color: 'white',
          showAsHUD: true,
          displayValue: true,
          isVisible: true,
          regenerateSpeed: 0,
          value: 0,
          dataType: '',
          max: 999999999,
          min: 0,
          name: 'Stone'
        },
        wood: {
          decimalPlaces: 0,
          color: 'white',
          showAsHUD: true,
          displayValue: true,
          isVisible: true,
          regenerateSpeed: 0,
          value: 0,
          dataType: '',
          max: 9999999,
          min: 0,
          name: 'Wood'
        },
        respawnTimer: {
          decimalPlaces: 0,
          color: 'white',
          showAsHUD: true,
          displayValue: false,
          isVisible: false,
          regenerateSpeed: 5,
          value: 100,
          dataType: '',
          max: 100,
          min: 0,
          name: 'respawnTimer'
        },
        qo4uN9R1Uj: {
          decimalPlaces: 0,
          color: 'white',
          showAsHUD: true,
          displayValue: false,
          isVisible: false,
          regenerateSpeed: 0,
          value: 0,
          dataType: '',
          max: 1000000,
          min: 0,
          name: 'Score'
        }
      },
      color: 'white',
      relationships: {
        aiHostile: 'neutral',
        humanPlayer: 'neutral'
      },
      showNameLabel: true
    },
    aiNeutral: {
      showNameLabel: false,
      relationships: {
        aiHostile: 'hostile',
        humanPlayer: 'hostile'
      },
      color: 'white',
      attributes: {},
      name: 'Neutral Creeps'
    },
    fo8DPQ2b5s: {
      showNameLabel: false,
      relationships: {},
      color: 'white',
      attributes: {},
      name: 'Resources'
    }
  },
  particles: {
    '7pA9mm1MLG': {
      name: 'spark',
      color: '#f4ff00',
      lifeBase: 30,
      quantityBase: 5,
      quantityTimespan: 30,
      deathOpacityBase: 1,
      mountPosition: {
        x: 0,
        y: 0
      },
      velocityVector: {
        baseVector: {
          x: 0,
          y: 0
        },
        minVector: {
          x: -1,
          y: -1
        },
        maxVector: {
          x: 1,
          y: 1
        }
      }
    },
    '87BiLybZhy': {
      name: 'bullet',
      color: '#636363',
      lifeBase: 50,
      quantityBase: 1,
      quantityTimespan: 30,
      deathOpacityBase: 1,
      mountPosition: {
        x: 0,
        y: 0
      },
      velocityVector: {
        baseVector: {
          x: 0,
          y: 0
        },
        minVector: {
          x: -1,
          y: -1
        },
        maxVector: {
          x: 1,
          y: 1
        }
      }
    }
  },
  particleTypes: {},
  bodyTypes: {
    default: {
      itemAnchor: {
        upperAngle: 0,
        lowerAngle: 0,
        y: 0,
        x: 0
      },
      unitAnchor: {
        rotation: 0,
        y: 33,
        x: 0
      },
      jointType: 'weldJoint',
      fixtures: [
        {
          isSensor: false,
          shape: {
            type: 'circle'
          },
          restitution: 0,
          friction: 0,
          density: 1
        }
      ],
      spriteScale: 1,
      rotationSpeed: 1,
      linearDamping: 8,
      angularDamping: 1,
      collidesWith: {
        debris: true,
        walls: true,
        projectiles: true,
        items: true,
        units: true
      },
      allowSleep: true,
      'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
      fixedRotation: false,
      'z-index': {
        depth: 3,
        layer: 3
      },
      height: 64,
      width: 64,
      type: 'static',
      name: 'default',
      bullet: false
    },
    selected: {
      itemAnchor: {
        y: 40,
        x: 0
      },
      unitAnchor: {
        x: 0,
        y: 12,
        rotation: 90
      },
      jointType: 'weldJoint',
      fixtures: [
        {
          isSensor: false,
          shape: {
            type: 'rectangle'
          },
          restitution: 0.01,
          friction: 0.01,
          density: 1
        }
      ],
      spriteScale: 1,
      rotationSpeed: 3,
      linearDamping: 5,
      angularDamping: 1,
      collidesWith: {
        debris: false,
        walls: true,
        projectiles: true,
        items: true,
        units: true
      },
      allowSleep: true,
      'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
      fixedRotation: false,
      'z-index': {
        depth: 2,
        layer: 3
      },
      height: 53,
      width: 26,
      type: 'spriteOnly',
      name: 'selected'
    },
    dropped: {
      bullet: false,
      itemAnchor: {
        y: 40,
        x: 0
      },
      unitAnchor: {
        rotation: 90,
        x: 0,
        y: 12
      },
      jointType: 'weldJoint',
      fixtures: [
        {
          isSensor: true,
          shape: {
            type: 'rectangle'
          },
          restitution: 0.01,
          friction: 0.01,
          density: 1
        }
      ],
      spriteScale: 1,
      rotationSpeed: 1,
      linearDamping: 1,
      angularDamping: 1,
      collidesWith: {
        debris: false,
        walls: false,
        projectiles: false,
        items: false,
        units: false
      },
      allowSleep: true,
      'constantSpeed +DestroyedOnCollisionWithWall/unit': false,
      fixedRotation: false,
      'z-index': {
        depth: 1,
        layer: 1
      },
      height: 53,
      width: 26,
      type: 'static',
      name: 'dropped'
    }
  },
  playerTypeVariables: {},
  folders: {
    units: {
      name: 'Units',
      type: 'folder'
    },
    bear: {
      type: 'unit',
      parent: 'units'
    },
    pig: {
      type: 'unit',
      parent: 'units'
    },
    survivor: {
      type: 'unit',
      parent: 'units'
    },
    tree: {
      type: 'unit',
      parent: 'units'
    },
    rock: {
      type: 'unit',
      parent: 'units'
    },
    T0IUZvxPfi: {
      type: 'unit',
      parent: 'units'
    },
    bLUZrdA3Gd: {
      type: 'unit',
      parent: 'units'
    },
    items: {
      name: 'Items',
      type: 'folder'
    },
    meleeAttack: {
      type: 'item',
      parent: 'items'
    },
    axe: {
      type: 'item',
      parent: 'items'
    },
    KXSjsHU2aQ: {
      type: 'item',
      parent: 'items'
    },
    mG6ZvXHNNX: {
      type: 'item',
      parent: 'items'
    },
    s2vnp9Ph2d: {
      type: 'item',
      parent: 'items'
    },
    HBlfzHEdHP: {
      type: 'item',
      parent: 'items'
    },
    wkuPHP94bA: {
      type: 'item',
      parent: 'items'
    },
    projectiles: {
      name: 'Projectiles',
      type: 'folder'
    },
    blood: {
      type: 'projectile',
      parent: 'projectiles'
    },
    RRl7Rgq0i1: {
      type: 'unit',
      parent: 'units'
    },
    cFmwF64UTq: {
      type: 'item',
      parent: 'items'
    }
  },
  ui: {
    landingpage: {
      folderName: 'Title Screen',
      parent: null,
      order: 0,
      expanded: true
    },
    landingpagefull: {
      name: 'Title Screen Full',
      htmlData: '',
      parent: 'landingpage',
      order: 0,
      type: 'view',
      preventDelete: true
    },
    dialogue: {
      folderName: 'Dialogue',
      parent: null,
      order: 1,
      expanded: true
    },
    dialogueview: {
      name: 'Dialogue View',
      htmlData: "\n<div class=\"modal\" id=\"modd-dialogue-modal\" tabindex=\"-1\" style='z-index:9050' data-backdrop='static'\n    data-keyboard='false'>\n    <div class=\"modal-dialog modal-lg modal-dialog-centered\" role=\"document\">\n        <div class=\"modal-content\">\n          {{#if dialogue.dialogueTitle}}\n            <div class=\"modal-header\">\n                <h5 class=\"modal-title\">{{dialogue.dialogueTitle}}</h5>\n            </div>\n          {{/if}}\n          \n            <div class=\"modal-body\">\n                <div class=\"row row-eq-height\">\n                    <div class=\"{{ternary dialogue.image 'col-4' 'd-none'}}\" id=\"modd-dialogue-image-container\">\n                        <!-- if an image was added to the dialogue, it is displayed here\n                        a ternary condition in #modd-dialogue-message-container changes css based on whether an image was added -->\n                        <img id=\"modd-dialogue-image\" style=\"background: none;\" class=\"loading w-100 rounded\" src=\"{{dialogue.image}}\" alt=\"image\">\n                    </div>\n\n                    <div class=\"{{ternary dialogue.image 'col-8 pl-md-0' 'col-12'}}\" id=\"modd-dialogue-message-container\">\n                        <div class=\"d-flex flex-column h-100\">\n                            <div class=\"flex-shrink-0 flex-grow-1 wrap-text\">\n                                <!-- modd-dialogue-message id needs to be kept for typing effect-->\n                                <p id=\"modd-dialogue-message\">\n                                    <!-- adds the content of HTMLmessage here\n                                    HTML syntax included in the message should render as expected\n                                    <style> tags included in the message are applied as well -->\n                                    {{dialogue.message}}\n                                </p>\n                                <p class=\"position-absolute mb-0 text-muted {{ternary dialogue.areOptionsRendered 'd-none' ''}}\" id=\"modd-dialogue-skip-hint\" style=\"bottom: 0; right: 15px;\">\n                                    <!-- customize the prompt for continuing to the next message -->\n                                    {{#if isMobile}}\n                                      tap to continue.\n                                    {{else}}\n                                      press space/click to continue.\n                                    {{/if}}\n                                </p>\n                            </div>\n\n                            <div id=\"modd-dialogue-options-container\" class=\"{{ternary dialogue.areOptionsRendered '' 'd-none'}}\">\n                                <div id=\"modd-dialogue-options\" class=\"w-100\">\n                                    <!-- if options were added to the dialogue, they display here\n                                    #each iterates through the options, you can use if conditions and options.length to change rendering logic based on amount of options-->\n                                    {{#each dialogue.options}}\n                                        <!-- dialogue-option class needs to be kept -->\n                                        <button class=\"w-100 btn btn-light border btn-block text-left dialogue-option\">\n                                            <i class=\"d-none fa fa-check mr-2 option-check\"></i>\n                                            <span>{{name}}<span>\n                                        </button>  \n                                    {{/each}}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n",
      parent: 'dialogue',
      order: 0,
      type: 'view',
      preventDelete: true
    },
    inputModal: {
      name: 'Input Modal View',
      htmlData: '\n<div class="modal align-items-center" id="player-input-modal" tabindex="-1">\n    <div class="modal-dialog modal-lg" role="document">\n        <div class="modal-content">\n            <div class="modal-header" id="player-input-modal-dismiss-button">\n                <h5 class="modal-title"></h5>\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n            </div>\n\n            <div class="modal-body">\n            <div class="form-group">\n                <label id="player-input-field-label">{{inputModal.fieldLabel}}</label>\n                <input id="player-input-field" class="form-control">\n            </div>\n\n            <div class="row">\n                <div class="col-sm-12 d-flex justify-content-end">\n                <div id="player-input-cancel-container">\n                    <button type="button" id="player-input-cancel" class="btn pull-right">Cancel</button>\n                </div>\n                <div id="player-input-submit-container">\n                    <button type="button" id="player-input-submit" class="btn pull-right btn-primary ml-2">Submit</button>\n                </div>\n                </div>\n            </div>\n            </div>\n        </div>\n    </div>\n</div>\n',
      parent: 'dialogue',
      order: 1,
      type: 'view',
      preventDelete: true
    },
    customModal: {
      name: 'Custom Modal View',
      htmlData: "\n<div class=\"modal fade align-items-center\" id=\"custom-modal\" tabindex=\"-1\">\n  <div class=\"modal-dialog modal-lg modal-dialog-centered\" role=\"document\">\n    <div class=\"modal-content\">\n\n      <div class=\"modal-header text-center\">\n        <h4 class=\"modal-title\"></h4>\n        <button id='custom-modal-dismiss-button' type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n\n      <div class=\"modal-body\">\n        <div class=\"content\">{{customModal.content}}</div>\n      </div>\n\n      <div class=\"modal-footer\">\n        <div class=\"row\">\n          <div class=\"col-sm-12\">\n            <div id=\"custom-modal-cancel-container\">\n              <button type=\"button\" data-dismiss=\"modal\" id=\"custom-modal-cancel\" class=\"btn pull-right\">Close</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
      parent: 'dialogue',
      order: 2,
      type: 'view',
      preventDelete: true
    },
    skinShopModal: {
      name: 'Skin Shop Modal View',
      htmlData: '\n<div class="modal" id="modd-shop-modal" tabIndex="-1">\n<div\n  class="modal-dialog modal-lg modal-dialog-centered"\n  role="document"\n>\n  <div class="modal-content">\n    <div class="modal-header d-flex align-items-center">\n      <h5 class="modal-title">Skins</h5>\n\n      <div style="position: fixed; right: 40px;" id="skin-shop-coin-balance">\n      </div>\n\n      <button\n        type="button"\n        class="close"\n        data-dismiss="modal"\n        aria-label="Close"\n      >\n        <span aria-hidden="true">&times;</span>\n      </button>\n    </div>\n\n    <div class="modal-body">\n      <div class="container">\n        <div class="col-12 p-0">\n          <ul class="nav nav-tabs row shop-navbar">\n            <li class="nav-item">\n              <span\n                class="nav-link"\n                id="unitSkins"\n                name="unitSkins"\n              >\n                Unit Skins\n              </span>\n            </li>\n            <li class="nav-item">\n              <span\n                class="nav-link"\n                id="itemSkins"\n                name="itemSkins"\n              >\n                Item Skins\n              </span>\n            </li>\n          </ul>\n        </div>\n\n        <div class="row" style="margin-top: 20px;">\n          <div class="col-sm-3 pl-0">\n            <div class="shop-sidebar"></div>\n              <div class="row text-center hide-on-mobile">\n                <div class="col">\n                  <a\n                    class="btn btn-success btn-block"\n                    style="white-space: inherit; margin-top: 4px;"\n                    target="_blank"\n                    href="#"\n                    role="button"\n                    rel="noreferrer"\n                    id="submit-your-design"\n                  >\n                    <span class="fas fa-plus mr-2"></span> Add New Skin\n                  </a>\n                </div>\n              </div>\n          </div>\n          <div class="col-9 pl-0">\n            <div class="shop-items"></div>\n          </div>\n        </div>\n\n        <div class="row" style="margin-top: 10px;">\n          <div class="col-9 offset-3 p-0 d-flex justify-content-center">\n            <div id="mod-shop-pagination"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n</div>\n',
      parent: 'dialogue',
      order: 3,
      type: 'view',
      preventDelete: true
    },
    inGameShopModal: {
      name: 'In-Game Shop Modal View',
      htmlData: '\n<div\n    class="modal"\n    id="modd-item-shop-modal"\n    tabIndex="-1"\n    style="z-index: 2050;"\n    >\n    <div\n        class="modal-dialog modal-lg modal-dialog-centered"\n        role="document"\n    >\n        <div class="modal-content">\n        <div class="modal-header d-flex align-items-center">\n            <h5 id="modd-item-shop-header">Item Shops</h5>\n\n            <div style="position: fixed; right: 40px;" id="ingame-shop-coin-balance">\n            </div>\n\n            <button\n                id="modd-item-shop-dismiss-button"\n                type="button"\n                class="close"\n                data-dismiss="modal"\n                aria-label="Close"\n            >\n            <span aria-hidden="true">&times;</span>\n            </button>\n        </div>\n        <div class="modal-body d-flex flex-column">\n            <div id="modd-item-shop-description"></div>\n            <div\n            class="container order-1 order-sm-2 mt-0 mt-md-3"\n            id="item-shop-modal"\n            >\n            <ul class="nav nav-tabs row item-shop-navbar hide-on-mobile">\n                <li class="nav-item">\n                <span\n                    class="nav-link active"\n                    id="unit"\n                    name="units"\n                    style="display: none;"\n                >\n                    Unit\n                </span>\n                </li>\n                <li class="nav-item">\n                <span\n                    class="nav-link"\n                    id="item"\n                    name="items"\n                    style="display: none;"\n                >\n                    Item\n                </span>\n                </li>\n            </ul>\n            <div class="row mt-0 mt-md-3">\n                <div class="items-shop col"></div>\n            </div>\n            </div>\n        </div>\n        </div>\n    </div>\n    </div>\n',
      parent: 'dialogue',
      order: 4,
      type: 'view',
      preventDelete: true
    },
    inGameUi: {
      folderName: 'In-Game UI',
      parent: null,
      order: 2,
      expanded: true
    },
    inGameUiFull: {
      name: 'In-Game UI',
      htmlData: '',
      parent: 'inGameUi',
      order: 0,
      type: 'view',
      preventDelete: true
    },
    defaultInGameUI: {
      name: 'Default In-Game UI',
      htmlData: '\n<!-- style used by other sections -->\n<style>\n    .game-ui {\n        z-index: 1000;\n        color: white;\n        margin: 10px;\n        display: none;\n        width: fit-content;\n        margin-left: auto;\n        padding-left: 10px;\n        text-align: center;\n    }\n\n    @media (max-width: 1024px) {\n        .game-ui {\n            font-size: 12px;\n            margin: 3px;\n            margin-left: auto;\n        }\n    }\n</style>\n\n<!-- leaderboard section -->\n<style>\n    #leaderboard {\n        right: 0px;\n        top: 30px;\n        text-align: right;\n        padding: 10px;\n\n        position: absolute;\n        color: white;\n        /* display: none; */\n        user-select: none;\n    }\n\n    .ui-text-scoreboard {\n        font-size: 18px;\n    }\n\n    #scoreboard-header {\n        border-bottom: 1px solid white;\n        display: flex;\n        align-items: center;\n        gap: 2px;\n\n        margin-bottom: 0px;\n        width: fit-content;\n        margin-left: auto;\n    }\n\n    #leaderboard-toggle {\n        display: inline;\n        cursor: pointer;\n    }\n\n    #leaderboard-title {\n        cursor: pointer;\n        text-decoration-line: none;\n        font-size: 14px;\n        font-weight: 600;\n    }\n\n    #scoreboard {\n        height: 175px;\n        overflow: auto;\n        padding-top: 10px;\n    }\n\n    #scoreboard .scoreboard-mobile {\n        width: 100px;\n        height: 100px;\n    }\n\n    @media (min-width: 1024px) {\n        .ui-text-scoreboard {\n            font-size: 24px;\n        }\n\n        #scoreboard-header {\n            gap: 4px;\n        }\n\n        #leaderboard-title {\n            font-size: 18px;\n            font-weight: 500;\n        }\n    }\n\n    @media only screen and (max-width: 1000px) {\n        #scoreboard .scoreboard-mobile {\n            height: 100px;\n            font-size: 13px;\n        }\n    }\n</style>\n\n<!-- game engine uses #leaderboard, #ui-text-scoreboard-id, #leaderboard-toggle, #scoreboard ids to add/update data -->\n<!-- so make sure to keep these ids -->\n<div class="leaderboard-container">\n    <div id="leaderboard">\n        <div class="shop ui-text-scoreboard" id="ui-text-scoreboard-id"></div>\n\n        <span id="scoreboard-header">\n            <div id="leaderboard-toggle"></div>\n            <u id="leaderboard-title">\n                Leaderboard\n            </u>\n        </span>\n        <div id="scoreboard"></div>\n    </div>\n</div>\n\n<!-- section for ui-text-top, highscore & ui-text-center -->\n<style>\n    .ui-text-top {\n        font-size: 24px;\n        padding: 10px;\n        display: none;\n    }\n\n    #counter {\n        position: absolute;\n        left: 0px;\n        right: 0;\n        top: 10px;\n        text-align: center;\n        color: white;\n        display: flex;\n        justify-content: center;\n        text-align: center;\n    }\n\n    .ui-text-top {\n        font-size: 1rem;\n        color: white;\n        background-color: rgba(0, 0, 0, 0.5);\n        border-radius: 5px;\n        padding: 10px;\n    }\n\n    .highscore-text {\n        z-index: 1030;\n        font-size: 4rem;\n    }\n\n    .ui-text-center-lg {\n        font-size: 3em;\n        z-index: 1000;\n        display: none;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        color: white;\n    }\n\n    @media (max-width: 768px) {\n        .ui-text-top {\n            font-size: 15px;\n            padding: 5px 10px;\n        }\n    }\n</style>\n\n<!-- game engine uses #ui-text-top-id, #ui-text-center-lg-id ids to add/update data -->\n<div id="counter" class="pointer-events-none">\n    <div class="col-3"></div>\n    <div class="col-6 p-0 d-flex align-items-center justify-content-center">\n        <div class="ui-text-top text-center" id="ui-text-top-id"></div>\n        <div class="highscore-text"></div>\n    </div>\n    <div class="col-3"></div>\n</div>\n<span class="pointer-events-none ui-text-center-lg" id="ui-text-center-lg-id"></span>\n\n<!-- section for inventory -->\n<style>\n    .inventory-container {\n        position: absolute;\n        bottom: 0px;\n        left: 50%;\n        min-width: 100px;\n        transform: translate(-50%);\n    }\n\n    #inventory-slots {\n        margin-bottom: 5px;\n    }\n\n    #attribute-bars {\n        margin-left: 2px;\n        margin-right: 2px;\n        position: relative;\n        margin: auto;\n    }\n</style>\n\n<!-- game engine uses #inventory-slots-key-stroke, #unit-status, .game-ui, #inventory-slots, #attribute-bars to add/update data -->\n<!-- so make sure to not change these ids -->\n<div class="inventory-container">\n    <div class="game-ui user-select-none" id="unit-status">\n        <div id="inventory-slots-key-stroke" role="group" aria-label="Justified button"></div>\n        <div id="inventory-slots" role="group" aria-label="Justified button group"></div>\n        <div id="attribute-bars"></div>\n    </div>\n</div>\n\n<!-- section for backpack & player attributes -->\n<style>\n    .backpack-container {\n        position: fixed;\n        right: 0px;\n        bottom: 0px;\n        text-align: right;\n    }\n\n    #backpack {\n        width: 240px;\n        margin: 10px;\n    }\n\n    #backpack-items-div {\n        display: flex;\n        justify-content: center;\n    }\n\n    #open-inventory-button {\n        position: relative;\n\n        padding: 2px 4px;\n        border-radius: 4px;\n        right: 3px;\n        align-items: center;\n        font-size: 16px;\n        width: fit-content;\n        margin-left: auto;\n        display: flex;\n        gap: 4px;\n        border: 1px solid rgb(76, 81, 85);\n    }\n\n    .open-inventory-icon {\n        width: 20px;\n        height: 20px;\n        display: inline;\n    }\n\n    .open-inventory-name {\n        display: none;\n    }\n\n    #my-score-div {\n        padding: 10px;\n        font-size: 18px;\n        border: 1px solid gray;\n    }\n\n    .score-div {\n        right: 0px;\n        bottom: 0px;\n        text-align: right;\n        user-select: none;\n    }\n\n    @media (max-width: 1024px) {\n        #backpack {\n            margin: 3px;\n        }\n\n        #my-score-div {\n            font-weight: 500;\n            font-size: 12px;\n            padding: 2px 5px;\n        }\n    }\n\n    @media (min-width: 1024px) {\n        #open-inventory-button {\n            right: 10px;\n            border-style: none;\n        }\n\n        .open-inventory-name {\n            display: inline;\n        }\n    }\n\n    @media (max-width: 768px) {\n        .score-div {\n            font-size: 10px !important;\n        }\n    }\n</style>\n\n<!-- game engine uses #backpack, #backpack-items-div, #open-inventory-button, #my-score-div, #players-attribute-div ids to add/update data -->\n<!-- so make sure to not change these ids -->\n<div class="backpack-container">\n    <div id="backpack" class="dark-bg" style="display: none;">\n        <div id="backpack-items-div" class="row"></div>\n    </div>\n\n    <div>\n        <button id="open-inventory-button" class="btn-success" style="display: none;">\n            <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 479.846 479.846"\n                class="open-inventory-icon" fill="#fff">\n                <path\n                    d="M283.502 6.922c-15.232 0-27.58 12.348-27.58 27.58v2.445c0 4.41 3.575 7.987 7.984 8 77.475.23 98.447-.324 107.63.096 4.566.209 8.388-3.42 8.388-7.99v-2.55c0-15.231-12.35-27.58-27.582-27.581h-68.84zm-156 .002c-15.232 0-27.58 12.348-27.58 27.58v2.55c0 4.572 3.82 8.2 8.387 7.99 9.19-.42 30.165.134 107.63-.095 4.41-.013 7.985-3.59 7.985-8v-2.445c0-15.232-12.35-27.58-27.582-27.58h-68.84zm-15.78 54c-29.081 0-48.664 29.57-37.949 56.11 16.59 41.16 41.45 72.808 73.91 94.048l.149.092a59.626 59.626 0 0032.73 9.75h8.356c4.42 0 8.007-3.578 8.004-7.998V68.924a8 8 0 00-7.998-8h-77.201zm109.202 0a8 8 0 00-8 8v149.539c0 7.435 3.527 14.172 9.35 18.46 2.31 1.709 2.663 1.738 17.65 9.08 14.714-7.208 15.334-7.37 17.648-9.08 5.822-4.287 9.352-11.024 9.352-18.46V68.923a8 8 0 00-8-8h-38zm69.998 0a7.998 7.998 0 00-7.996 8v144c-.003 4.42 3.582 8 8.002 8h8.176a60.24 60.24 0 0033.07-9.852c32.45-21.23 57.308-52.879 73.898-94.039 10.711-26.604-8.902-56.11-37.949-56.11h-77.201zM90.75 184.598c-3.784.145-7.386 2.95-7.717 7.406l-16.62 220.35c-2.11 32.835 23.911 60.57 56.82 60.57h233.38c32.716 0 58.939-27.516 56.82-60.66l-16.61-220.26c-.53-7.12-9.43-10.03-14.06-4.58-11.93 14.04-25.85 26.579-41.83 37.039-12.48 8.15-26.94 12.46-41.83 12.46h-16.337c-2.664 0-5.125 1.345-6.633 3.54-3.758 5.467-8.951 10.002-15.24 13.08l-17.45 8.55a8.059 8.059 0 01-7.04 0l-17.45-8.55c-6.288-3.078-11.48-7.613-15.238-13.08-1.51-2.195-3.972-3.54-6.635-3.54h-16.518c-14.355 0-28.457-3.89-41.628-12.45-16.051-10.432-29.96-23.06-41.84-37.05-1.736-2.043-4.073-2.913-6.344-2.825zm149.174 1.326c4.42 0 8 3.58 8 8v5.539c0 7.194-8.88 10.774-13.852 5.46a7.998 7.998 0 01-2.148-5.46v-5.54c0-4.42 3.58-8 8-8zm-202.881 81c-14.53 0-26.83 11.338-28.01 25.818l-1.345 16.531c-.38 4.66 3.298 8.65 7.972 8.65h23.264a7.997 7.997 0 017.982 8.528c-.273 4.253-3.994 7.473-8.256 7.473H13.06a8 8 0 00-7.975 7.35l-4.99 61.269c-1.321 16.357 11.599 30.38 28.01 30.38h14.695c4.814 0 8.463-4.211 7.935-8.995-1.055-9.548-1.032-2.399 9.944-148.407.348-4.64-3.325-8.597-7.979-8.597H37.043zm390.103 0c-4.654 0-8.327 3.956-7.978 8.597 10.937 145.476 10.976 139.052 9.943 148.407-.528 4.784 3.125 8.996 7.938 8.996h14.693c16.41 0 29.333-14.022 28.012-30.38l-4.992-61.27a8.002 8.002 0 00-7.975-7.35h-25.863a8 8 0 01-7.985-8.53c.273-4.252 3.994-7.47 8.256-7.47h22.99c4.676 0 8.352-3.99 7.973-8.649l-1.346-16.53c-1.18-14.48-13.48-25.821-28.01-25.821h-15.656zm-263.632 30h152.818c15.21 0 27.592 12.38 27.592 27.59v68.818c0 15.21-12.382 27.592-27.592 27.592H163.514c-15.21 0-27.59-12.382-27.59-27.592v-68.818c0-15.21 12.38-27.59 27.59-27.59zm0 16c-6.39 0-11.59 5.2-11.59 11.59v68.818c0 6.39 5.2 11.592 11.59 11.592h152.818c6.39 0 11.592-5.202 11.592-11.592v-68.818c0-6.39-5.202-11.59-11.592-11.59H163.514zm28.41 35h96c4.42 0 8 3.58 8 8s-3.58 8-8 8h-96c-4.42 0-8-3.58-8-8s3.58-8 8-8z">\n                </path>\n            </svg>\n            <span class="open-inventory-name">Backpack</span>\n        </button>\n    </div>\n    <div id="my-score-div" class="game-ui dark-bg score-div">\n        <span id="players-attribute-div"></span>\n    </div>\n</div>\n',
      parent: 'inGameUi',
      order: 1,
      type: 'view',
      preventDelete: true
    }
  },
  title: 'test',
  isDeveloper: true,
  isGameDeveloper: true,
  releaseId: '65521b412313b08554c3cb53',
  defaultData: {
    _id: '65521b412313b08554c3cb55',
    gameSlug: 'dLQZTmknE',
    title: 'test',
    tier: '1',
    allowDuplicateIPS: false,
    access: 'private',
    owner: '5a2192a4367d95002ba22eea',
    solanaWalletLoginEnabled: false,
    isDeleted: false,
    playCount: 0,
    totalPlayCount: 212,
    reasonForTakingDown: '',
    cover: 'https://modd.s3.amazonaws.com/asset/spriteImage/15863759001061586375933019_covee.png',
    coverUpdated: false,
    link: null,
    discordInviteLink: null,
    twitterLink: null,
    facebookLink: null,
    youtubeLink: null,
    androidLink: null,
    iosLink: null,
    redirect: 'off',
    hidden: false,
    patchNotes: null,
    clientSidePredictionEnabled: true,
    clientPhysicsEngine: 'box2dweb',
    enableMiniMap: false,
    dontResize: false,
    releases: [
      {
        isStable: false,
        _id: '65521b412313b08554c3cb56',
        version: 0.01,
        release: '65521b412313b08554c3cb53'
      }
    ],
    defaultMaxPlayers: 32,
    lifeSpanHours: 5,
    sandboxMode: 'advanced',
    physicsEngine: 'box2dwasm',
    frameRate: 15,
    extrapolation: true,
    moreIoGames: false,
    allowGuestMode: false,
    revenueSharing: false,
    mobileReady: false,
    autoSave: true,
    canHostPrivateServers: false,
    privateServerIdleTimeout: 0.1,
    enableVideoChat: false,
    isGuestPlayerAllowed: true,
    enablePersistedData: false,
    allowVerifiedUserToChat: false,
    isFeatured: false,
    featuredOrderNo: -1,
    isLobbyEnabled: false,
    lobbyUnitKey: '',
    minLobbySize: 2,
    maxLobbySize: 4,
    heightBasedZIndex: false,
    preferredRegion: '',
    isMod: false,
    isModdable: false,
    allowLateJoining: false,
    parentGameId: '5dd7806d1aae9c5bbc066b10',
    dailyCoinTransferLimit: 0,
    isPublished: true,
    contextMenuEnabled: true,
    disableAdsPortals: false,
    createdAt: '2023-11-13T12:49:05.658Z',
    updatedAt: '2024-01-26T17:06:19.276Z',
    invitedUsers: [],
    banUsers: [],
    banChat: [],
    banIps: [],
    highScores: [],
    lastPlayedAt: '2024-01-31T16:40:07.384Z',
    __v: 42,
    engineVersion: '2.0.0',
    renderingFilter: 'pixelArt',
    version: '0.01'
  }
}
