import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType } from '@ts-jison/parser';
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */
var funcs:any = {
    vec2: function(x:any, y:any): any  { 
      return {
        "function": "xyCoordinate",
        "x": x,
        "y": y
      };
    },
    sendChatMessage: function(msg
    : any ): any {
      return {
        "type": "sendChatMessage",
        "message": msg
      }
    },
    toString: function(num: any): any {
      return {
          "function": "numberToString",
          "value": num
      }
    }
  }
  var attr:any = {
    x: function(pos: any): any {
     return {
         "function": "getPositionX",
         "position": pos
      };
    },
    y: function(pos:any ): any {
     return {
         "function": "getPositionY",
         "position": pos
      };
    }
  }

export class TsCalcParser extends JisonParser implements JisonParserApi {
    $?: any;
    symbols_: SymbolsType = {"error":2,"expressions":3,"e":4,"EOF":5,"expression_list":6,",":7,".":8,"[":9,"]":10,"\"":11,"+":12,"-":13,"*":14,"/":15,"(":16,")":17,"NUMBER":18,"NAME":19,"STRING":20,"'":21,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",7:",",8:".",9:"[",10:"]",11:"\"",12:"+",13:"-",14:"*",15:"/",16:"(",17:")",18:"NUMBER",19:"NAME",20:"STRING",21:"'"};
    productions_: ProductionsType = [0,[3,2],[6,3],[6,3],[6,4],[6,3],[6,1],[4,3],[4,3],[4,3],[4,3],[4,2],[4,3],[4,1],[4,6],[4,4],[4,1],[4,3],[4,4],[4,6],[4,6],[4,3]];
    table: Array<StateType>;
    defaultActions: {[key:number]: any} = {10:[2,1]};

    constructor (yy = {}, lexer = new TsCalcLexer(yy)) {
      super(yy, lexer);

      // shorten static method to just `o` for terse STATE_TABLE
      const $V0=[1,9],$V1=[1,3],$V2=[1,4],$V3=[1,5],$V4=[1,6],$V5=[1,7],$V6=[7,8,9],$V7=[2,6],$V8=[1,11],$V9=[1,12],$Va=[1,13],$Vb=[1,14],$Vc=[5,7,8,9,10,11,12,13,14,15,17],$Vd=[1,17],$Ve=[1,21],$Vf=[1,19],$Vg=[1,20],$Vh=[5,7,8,9,10,11,12,13,17],$Vi=[7,8,9,11,17];
      const o = JisonParser.expandParseTable;
      this.table = [{3:1,4:2,6:8,11:$V0,13:$V1,16:$V2,18:$V3,19:$V4,20:$V5},{1:[3]},o($V6,$V7,{5:[1,10],12:$V8,13:$V9,14:$Va,15:$Vb}),{4:15,6:8,11:$V0,13:$V1,16:$V2,18:$V3,19:$V4,20:$V5},{4:16,6:8,11:$V0,13:$V1,16:$V2,18:$V3,19:$V4,20:$V5},o($Vc,[2,13]),{16:$Vd},o([5,7,8,9,10,11,13,14,15,17],[2,16],{12:[1,18]}),{7:$Ve,8:$Vf,9:$Vg},{4:22,6:8,11:$V0,13:$V1,16:$V2,18:$V3,19:$V4,20:$V5},{1:[2,1]},{4:23,6:8,11:$V0,13:$V1,16:$V2,18:$V3,19:$V4,20:$V5},{4:24,6:8,11:$V0,13:$V1,16:$V2,18:$V3,19:$V4,20:$V5},{4:25,6:8,11:$V0,13:$V1,16:$V2,18:$V3,19:$V4,20:$V5},{4:26,6:8,11:$V0,13:$V1,16:$V2,18:$V3,19:$V4,20:$V5},o($Vc,[2,11]),o($V6,$V7,{12:$V8,13:$V9,14:$Va,15:$Vb,17:[1,27]}),{4:30,6:29,11:[1,28],13:$V1,16:$V2,18:$V3,19:$V4,20:$V5},{20:[1,31]},{4:33,6:8,11:$V0,13:$V1,16:$V2,18:$V3,19:[1,32],20:$V5},{4:37,6:8,11:[1,36],13:$V1,16:$V2,18:$V3,19:[1,34],20:$V5,21:[1,35]},{4:38,6:8,11:$V0,13:$V1,16:$V2,18:$V3,19:$V4,20:$V5},o($V6,$V7,{11:[1,39],12:$V8,13:$V9,14:$Va,15:$Vb}),o($Vh,[2,7],{14:$Va,15:$Vb}),o($Vh,[2,8],{14:$Va,15:$Vb}),o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,12]),{4:22,6:40,11:$V0,13:$V1,16:$V2,18:$V3,19:$V4,20:$V5},{7:$Ve,8:$Vf,9:$Vg,17:[1,41]},o([7,8,9,17],$V7,{12:$V8,13:$V9,14:$Va,15:$Vb}),o($Vc,[2,21]),o($Vc,[2,17],{16:$Vd}),o($Vi,[2,3],{12:$V8,13:$V9,14:$Va,15:$Vb}),{10:[1,42],16:$Vd},{19:[1,43]},{4:22,6:8,11:$V0,13:$V1,16:$V2,18:$V3,19:[1,44],20:$V5},o($V6,$V7,{10:[1,45],12:$V8,13:$V9,14:$Va,15:$Vb}),o($Vi,[2,2],{12:$V8,13:$V9,14:$Va,15:$Vb}),o($Vi,[2,5]),{7:$Ve,8:$Vf,9:$Vg,11:[1,46]},o($Vc,[2,15]),o($Vc,[2,18]),{21:[1,47]},{11:[1,48],16:$Vd},o($Vi,[2,4]),{17:[1,49]},{10:[1,50]},{10:[1,51]},o($Vc,[2,14]),o($Vc,[2,19]),o($Vc,[2,20])];
    }

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:
 console.log($$[$0-1]); return $$[$0-1]; 
break;
case 2:
 this.$ = $$[$0-2].concat([$$[$0]]); 
break;
case 3: case 5:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 4:
this.$ = $$[$0-3].concat([$$[$0-1]]);
break;
case 6:
 this.$ = [$$[$0]]; 
break;
case 7:
 this.$ = { items: [{operator:"+"},$$[$0-2], $$[$0]]}
break;
case 8:
 this.$ = { items: [{operator:"-"},$$[$0-2], $$[$0]]}
break;
case 9:
 this.$ = { items: [{operator:"*"},$$[$0-2], $$[$0]]}
break;
case 10:
 this.$ = { items: [{operator:"/"},$$[$0-2], $$[$0]]}
break;
case 11:
 this.$ = { items: [{operator:"*"},$$[$0], -1]} 
break;
case 12:
 this.$ = $$[$0-1]; 
break;
case 13:
this.$ = Number(yytext);
break;
case 14:
this.$ = funcs[$$[$0-5]].apply(undefined, $$[$0-2]);
break;
case 15:
this.$ = funcs[$$[$0-3]].apply(undefined, $$[$0-1]);
break;
case 16:
this.$ = yytext.slice(1, yytext.length-1)
break;
case 17:
this.$ = attr[$$[$0]].apply(undefined,
$$[$0-2]); 
break;
case 18:
this.$ = attr[$$[$0-1]].apply(undefined,
$$[$0-3]); 
break;
case 19: case 20:
this.$ = attr[$$[$0-2]].apply(undefined,
$$[$0-5]); 
break;
case 21:
 this.$ =  {
                    "function": "concat",
                    "textA": $$[$0-2].slice(1, yytext.length-1),
                    "textB": $$[$0].slice(1, yytext.length-1)
               } 
break;
        }
    }
}


/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';

export class TsCalcLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"moduleName":"TsCalc"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [
        /^(?:\s+)/,
        /^(?:["][^"]*["]|['][^']*['])/,
        /^(?:[0-9]+(?:\.[0-9]+)?\b)/,
        /^(?:[a-zA-Z0-9]+)/,
        /^(?:,)/,
        /^(?:\*)/,
        /^(?:\/)/,
        /^(?:-)/,
        /^(?:\+)/,
        /^(?:\^)/,
        /^(?:\()/,
        /^(?:\))/,
        /^(?:\[)/,
        /^(?:\])/,
        /^(?:')/,
        /^(?:")/,
        /^(?:\.)/,
        /^(?:$)/,
        /^(?:.)/
    ];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:/* skip whitespace */
      break;
    case 1:return 20
      break;
    case 2:return 18
      break;
    case 3:return 19
      break;
    case 4:return 7
      break;
    case 5:return 14
      break;
    case 6:return 15
      break;
    case 7:return 13
      break;
    case 8:return 12
      break;
    case 9:return '^'
      break;
    case 10:return 16
      break;
    case 11:return 17
      break;
    case 12:return 9
      break;
    case 13:return 10
      break;
    case 14:return "'"
      break;
    case 15:return 11
      break;
    case 16:return 8
      break;
    case 17:return 5
      break;
    case 18:return 'INVALID'
      break;
        }
    }
}


